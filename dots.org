* Emacs
:PROPERTIES:
:header-args: :tangle ~/.emacs.d/init.el
:END:

** Better defaults
*** Set better default for a better emacs start up
#+begin_src emacs-lisp
(setq default-directory user-emacs-directory
      gc-cons-percentage .6
      gc-cons-threshold most-positive-fixnum
      read-process-output-max (* 1024 1024))
;; Profile emacs startup
;; (add-hook 'emacs-startup-hook
;;           (lambda ()
;;             (message "*** Emacs loaded in %s with %d garbage collections."
;;                      (format "%.2f seconds"
;;                              (float-time
;;                               (time-subtract after-init-time before-init-time)))
;;                      gcs-done)))
#+end_src

*** Start server
#+begin_src emacs-lisp :tangle no
(server-start)
#+end_src
*** Hide menu, tool-bar, scroll-bar
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
#+end_src
*** Default utf-8 encoding
#+begin_src emacs-lisp
(set-default-coding-systems 'utf-8)
#+end_src

*** Start in a blank page
This allow to start emacs in a blank page
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message "")
#+end_src

*** Disable custom file
I choose to lay out my configurations and customizations in this very Org
document for better visibility and maintainability through time and various
upgrades. Albeit useful, the =customize-*= routines go against that strategy by
writing directly at the end of the =user-init-file= or into a dedicated file
when set accordingly.

To fight the littering I've decided to completely disable this feature and
redirect the writing to =/dev/null=.

#+begin_src emacs-lisp
(setq-default custom-file null-device)
#+end_src

*** Set font
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "IBM Plex Mono 12"))
;; (set-face-attribute 'default nil
;;                     :family "IBM Plex Mono"
;;                     :height 130
;;                     :weight 'normal
;;                     :width 'normal)
#+end_src

*** Better scrolling
#+begin_src emacs-lisp
(setq scroll-margin 3
      scroll-conservatively 101
      scroll-up-aggressively 0.01
      scroll-down-aggressively 0.01
      scroll-preserve-screen-position t
      auto-window-vscroll nil)
#+end_src

*** Open buffer vertically (help buffer, pdf, etc)
#+begin_src emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 0)
#+end_src

*** Stop emacs from asking me if I want to load a large file
#+begin_src emacs-lisp
(setq large-file-warning-threshold nil)
#+end_src

*** Hide tabs
#+begin_src emacs-lisp
(setq tab-bar-show nil)
#+end_src

*** Convert tabs to white spaces
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src
*** Make tabs to be 2 whitespaces width
#+begin_src emacs-lisp
(setq-default tab-width 2)
#+end_src

*** Delete trailing whitespace
This always creates unnecessary diffs in git. Just delete it upon saving.

#+begin_src emacs-lisp
(add-hook 'before-save-hook #'delete-trailing-whitespace)
(add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

*** Show trailing white spaces and empty lines
#+begin_src emacs-lisp
(setq-default show-trailing-whitespace nil)
(setq-default indicate-empty-lines t)
#+end_src

*** Configure compile command
#+begin_src emacs-lisp
;; use make as default command when M-x compile
(setq compile-command "make")
;; don't ask for confirmation to run make command
;; just run it
(setq compilation-read-command nil)
#+end_src

*** Preserve contents of system clipboard
Say you copied a link from your web browser, then switched to
Emacs to paste it somewhere. Before you do that, you notice
something you want to kill. Doing that will place the last kill to
the clipboard, thus overriding the thing you copied earlier. We
can have a kill ring solution to this with the following:

#+begin_src emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+end_src

Now the contents of the clipboard are stored in the kill ring and can
be retrieved from there (e.g. with M-y).

*** Update file whenever the file change
This mode ensures that the buffer is updated whenever the file
changes. A change can happen externally or by some other tool
inside of Emacs (e.g. kill a Magit diff).

#+begin_src emacs-lisp
(setq auto-revert-verbose t)
(add-hook 'after-init-hook 'global-auto-revert-mode)
#+end_src

*** Does anyone type yes anymore?
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Do not display buffers with the name ~*Async Shell Command*~
It is annoying when exactracting files with the UI program.
#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
#+end_src

*** Stop blinking cursor
Turn off the blinking cursor
#+begin_src emacs-lisp
(blink-cursor-mode -1)
#+end_src

*** Show-paren-mode
Highlight the the matching (){}[]
#+begin_src emacs-lisp
(show-paren-mode t)
#+end_src

*** Highlight current line
#+begin_src emacs-lisp
;; (global-hl-line-mode t)
(add-hook 'prog-mode-hook #'hl-line-mode)
(add-hook 'org-mode-hook #'hl-line-mode)
#+end_src

*** Stop asking to kill the process when exit emacs
#+begin_src emacs-lisp
(setq confirm-kill-processes nil)
#+end_src

*** Open help buffers in the current window
#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("*Help*" display-buffer-same-window))
#+end_src

*** Backups and autosaves
#+begin_src emacs-lisp
(setq backup-directory-alist
      '(("." . "~/.emacs.d/backup/")))
(setq backup-by-copying t)
(setq version-control t)
(setq delete-old-versions t)
(setq kept-new-versions 6)
(setq kept-old-versions 2)
(setq create-lockfiles nil)
;; (setq make-backup-files nil)
(setq auto-save-default nil)
(setq auto-save-list-file-prefix nil)
#+end_src

*** Position register
#+begin_src emacs-lisp
(setq register-alist
  `((115 . ,(with-current-buffer "*scratch*" (point-marker)))
    (109 . ,(with-current-buffer "*Messages*" (point-marker)))
    (114 file . "~/.emacs.d/notes")
    (100 file . "~/Projects/dots/dots.org")))
#+end_src

*** Prettify Symbols
#+begin_src emacs-lisp
(global-prettify-symbols-mode 1)
(defun add-pretty-lambda ()
  "Make some word or string show as pretty Unicode symbols.  See https://unicodelookup.com for more."
  (setq prettify-symbols-alist
        '(
          ("lambda" . 955)
          ("delta" . 120517)
          ("epsilon" . 120518)
          ("->" . 8594)
          ("<=" . 8804)
          (">=" . 8805))))
(add-hook 'prog-mode-hook 'add-pretty-lambda)
(add-hook 'org-mode-hook 'add-pretty-lambda)
#+end_src

** Packages
*** straight.el
#+begin_src emacs-lisp
(defvar bootstrap-version)
;;(setq straight-repository-branch "develop")
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq straight-use-package-by-default t)
#+end_src

*** use-package
#+begin_src emacs-lisp
(straight-use-package 'use-package)
;; (setq use-package-verbose t)
#+end_src

*** exec-path-from-shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :defer 5
  :config
  (exec-path-from-shell-copy-env "LD_LIBRARY_PATH")
  (when (daemonp)
  (exec-path-from-shell-initialize)))
#+end_src

*** all-the-icons
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

*** doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-modal-icon nil)
  (doom-modeline-lsp t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-major-mode-icon nil)
  (doom-modeline-buffer-file-name-style 'file-name)
  ;; Whether display buffer encoding.
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-icon (display-graphic-p)))
#+end_src

*** doom themes
#+begin_src emacs-lisp
(use-package doom-themes
  :custom
  (doom-themes-enable-bold t)    ; if nil, bold is universally disabled
  (doom-themes-enable-italic t)  ; if nil, italics is universally disabled
  (doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  :config
  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  (load-theme 'doom-one t)
  ;; (load-theme 'doom-solarized-dark t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; or for treemacs users
  (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

*** general.el
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup))
#+end_src

*** windmove
#+begin_src emacs-lisp
(use-package windmove
  :straight (:type built-in)
  :config
  (general-define-key
   :states '(normal insert motion emacs)
   "s-l" 'windmove-right
   "s-h" 'windmove-left
   "s-k" 'windmove-up
   "s-j" 'windmove-down)

  (general-define-key
   :states 'normal
   :prefix "C-c"
   "r l" 'windmove-delete-right
   "r h" 'windmove-delete-left
   "r j" 'windmove-delete-down
   "r k" 'windmove-delete-up))
#+end_src

*** winner-mode
#+begin_src emacs-lisp
(use-package winner
  :straight (:type built-in)
  :hook
  (after-init . winner-mode)
  :general
  (:states '(normal insert motion emacs)
           "s-n" 'winner-undo
           "s-m" 'winner-redo))
#+end_src

*** org-mode
#+begin_src emacs-lisp
(use-package org
  :custom
  (org-startup-folded t)
  ;; (org-hide-emphasis-markers t)
  (org-agenda-files '("~/org/tasks.org"))
  ;; to be able to use #+attr_org: :width
  (org-image-actual-width nil)
  (org-startup-with-inline-images t)
  (org-display-remote-inline-images 'download)
  ;; inline latex like $y=mx+c$ will appear in a different colour in
  ;; an org-mode file to help it stand out
  (org-highlight-latex-and-related '(latex))
  (org-ellipsis "…")
  ;; syntax highlight
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-src-window-setup 'current-window)
  (org-edit-src-content-indentation 0)
  (org-src-preserve-indentation nil)
  (org-imenu-depth 7)
  ;; Don't ask for confirm when evaluating a source block
  (org-confirm-babel-evaluate nil)
  ;; RETURN will follow links in org-mode files
  (org-return-follows-link  t)
  (org-export-backends '(ascii beamer html latex md))
  ;; (org-image-actual-width '(300))
  :config
  ;; Font size control of LateX previews in Org files
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

  ;; https://emacs.stackexchange.com/questions/29902/more-detailed-description-of-how-to-set-up-org-file-apps-for-orgmode-9-0
  ;; how to open attach files in an org file
  (setq org-file-apps
        '(("\\.docx\\'" . default)
          ("\\.mm\\'" . default)
          ("\\.pdf::\\([0-9]+\\)?\\'" . "zathura %s -P %1")
          ("\\.x?html?\\'" . default)
          ("\\.pdf\\'" . "zathura \"%s\"")
          (auto-mode . emacs)))
  ;; open org-links with a specific program.
  ;; in this case open pdf files with zathura
  ;; (add-hook 'org-mode-hook
  ;;           '(lambda ()
  ;;              (setq org-file-apps
  ;;                    '((auto-mode . emacs)
  ;;                      ("\\.pdf::\\([0-9]+\\)?\\'" . "zathura %s -P %1")
  ;;                      ("\\.pdf\\'" . "zathura %s")
  ;;                      (directory . emacs)))))

  (add-hook 'org-mode-hook (lambda () (setq fill-column 80)))
  ;; This break the line but only when editing
  (add-hook 'org-mode-hook 'auto-fill-mode)
  ;; Visualy break the line of the frame size
  (add-hook 'org-mode-hook 'visual-line-mode)

  ;; puts the cursor in the right position
  ;; when hitting enter
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (js . t)
     (latex . t)
     (calc . t)
     (shell . t)
     (sql . t)
     (lisp . t)
     (C . t)
     (python . t)
     (emacs-lisp . t)))
  :general
  (:states '(normal)
           :keymaps 'org-mode-map
           "h" 'left-char)
  (:prefix ","
           :states 'normal
           :keymaps 'org-mode-map
           "t" 'ram/org-set-tags
           "n" 'org-toggle-narrow-to-subtree))
#+end_src

*** evil
#+begin_src emacs-lisp
(use-package evil
  :hook (after-init . evil-mode)
  :custom
  (evil-undo-system 'undo-fu)
  ;; change the color of the cursor
  (evil-normal-state-cursor '("gray" box))
  (evil-visual-state-cursor '("orange" box))
  (evil-insert-state-cursor '("dodger blue" bar))
  (evil-replace-state-cursor '("red" bar))
  ;; use emacs bindings in insert-mode
  (evil-disable-insert-state-bindings t)
  (evil-want-keybinding nil)
  :config
  (evil-set-initial-state 'dired-mode 'normal)
  (evil-set-initial-state 'wdired-mode 'normal)
  (evil-set-initial-state 'org-mode 'normal)
  (evil-set-initial-state 'vterm-mode 'insert)
  (evil-set-initial-state 'prog-mode 'normal)
  (evil-set-initial-state 'ebib-index-mode 'emacs)
  (evil-set-initial-state 'org-fc-dashboard-mode 'emacs)
  (evil-set-initial-state 'org-fc-flip-mode 'emacs)
  (evil-set-initial-state 'org-fc-rate-mode 'emacs)
  (evil-set-initial-state 'Info-mode 'emacs)
  (evil-set-initial-state 'org-fc-review-rate-mode 'emacs)
  (evil-set-initial-state 'org-fc-review-flip 'emacs)
  (evil-set-initial-state 'calibredb-search-mode 'emacs)
  (evil-set-initial-state 'exwm-mode 'emacs)
  (evil-set-initial-state 'rg-mode 'emacs)
  ;; (evil-set-initial-state 'nov-mode 'emacs)
  (evil-set-initial-state 'image-mode 'emacs)
  (evil-set-initial-state 'eshell-mode 'normal)
  (evil-set-initial-state 'pdf-view-mode 'emacs)
  (evil-set-initial-state 'pdf-annot-list-mode 'emacs)
  (evil-set-initial-state 'pdf-outline-buffer-mode 'emacs)
  :general
  (:states '(emacs normal motion insert visual)
           "C-c c r k" '(lambda () (interactive) (kill-line 0))
           "C-c c v u" 'evil-scroll-up
           "C-c c v d" 'evil-scroll-down
           "C-c c e ," 'mode-line-other-buffer
           "C-c c o n" 'org-toggle-narrow-to-subtree
           "C-c c d d" '(lambda() (interactive) (dired default-directory))
           )
  (:states '(normal motion)
           "C-p" 'previous-line
           "C-n" 'next-line
           "C-a" 'evil-first-non-blank
           "C-e" 'evil-last-non-blank
           "C-f" 'forward-char
           "C-b" 'backward-char
           "j" 'evil-next-visual-line
           "k" 'evil-previous-visual-line
           "m" 'point-to-register
           "'" 'jump-to-register
           "gp" 'ram/evil-select-pasted))
           #+end_src

*** evil-commentary
#+begin_src emacs-lisp
(use-package evil-commentary
  :after evil)
#+end_src

*** evil-surround
#+begin_src emacs-lisp
(use-package evil-surround
  :after evil
  :config
  (setq-default evil-surround-pairs-alist
                (append '((?p . ("(" . ")"))
                          (?s . ("*" . "*"))
                          (?w . ("%" . "%"))
                          (?x . ("$" . "$"))
                          (?q . ("@" . "@")))
                        evil-surround-pairs-alist))
  (global-evil-surround-mode 1))
#+end_src

*** org-evil
#+begin_src emacs-lisp
(use-package evil-org
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
  )
#+end_src

*** dired
#+begin_src emacs-lisp
(use-package dired
  ;;:commands (dired dired-jump)
  :straight (:type built-in)
  :hook ((dired-mode . hl-line-mode)
         (dired-mode . dired-hide-details-mode))
  :custom
  (dired-recursive-copies 'always)
  (dired-recursive-deletes 'always)
  (dired-dwim-target t) ;;use to copy to the next buffer visible
  ;; Auto refresh Dired, but be quiet about it
  (global-auto-revert-non-file-buffers t)
  (auto-revert-verbose nil)
  (image-dired-external-viewer (executable-find "sxiv"))
  :config
  ;; Enable global auto-revert
  (global-auto-revert-mode t)
  ;; Reuse same dired buffer, to prevent numerous buffers while navigating in dired
  (put 'dired-find-alternate-file 'disabled nil)

  (setq dired-listing-switches "-Bhl --group-directories-first -v")
  (set-face-attribute 'dired-header nil
                      :foreground "#282c34"
                      :weight 'bold)

  (defcustom list-of-dired-switches
    '(("-Bhl --group-directories-first -v" . "")
      ("-ahl -v --group-directories-first -v" . "everything")
      ;; ("-BhlAL --group-directories-first -v" . "no . & ..")
      )
    "List of ls switches (together with a name to display in the mode-line) for dired to cycle among.")


  (defun cycle-dired-switches ()
    "Cycle through the list `list-of-dired-switches' of switches for ls"
    (interactive)
    (setq list-of-dired-switches
          (append (cdr list-of-dired-switches)
                  (list (car list-of-dired-switches))))
    (dired-sort-other (caar list-of-dired-switches))
    (setq mode-name (concat "Dired " (cdar list-of-dired-switches)))
    (force-mode-line-update))

  ;; remove buffers before delete the file
  (defun ram/dired-kill-before-delete (file &rest rest)
    (when-let ((buf (get-file-buffer file)))
      (kill-buffer buf)))

  (advice-add 'dired-delete-file :before 'ram/dired-kill-before-delete)

  :general
  (:states 'normal
           :keymaps 'dired-mode-map
           "j" 'dired-next-line
           "k" 'dired-previous-line
           "l" 'ram/dired-open
           "h" 'dired-up-directory
           "yy" 'dired-do-copy
           "yn" 'dired-copy-filename-as-kill
           "yp" (lambda() (interactive) (dired-copy-filename-as-kill 0))
           "gk" (lambda() (interactive) (dired "~/Documents"))
           "gn" (lambda() (interactive) (dired "~/Documents/notes"))
           "gd" (lambda() (interactive) (dired "~/Downloads"))
           "gp" (lambda() (interactive) (dired "~/Projects"))
           "gk" (lambda() (interactive) (dired "~/Projects/katas"))
           "ge" (lambda() (interactive) (dired "~/.emacs.d"))
           "gc" (lambda() (interactive) (dired "~/.config"))
           "gs" (lambda() (interactive) (dired "~/bin/scripts"))
           "gy" (lambda() (interactive) (dired "~/Projects/playground"))
           "gb" (lambda() (interactive) (dired "~/bin"))
           "gm" (lambda() (interactive) (dired "/media"))
           "gh" (lambda() (interactive) (dired "~"))
           "m" 'dired-mark
           "u" 'dired-unmark
           "t" 'dired-toggle-marks
           "cw" 'dired-do-rename
           "r" 'revert-buffer
           "nd" 'dired-create-directory
           "nf" 'dired-create-empty-file
           "np" 'ram/create-project
           "nk" 'ram/create-kata
           "s" 'dired-do-async-shell-command
           "q" 'quit-window
           "w" 'dired-toggle-read-only
           "W" 'wdired-finish-edit
           "x" 'dired-do-compress
           "za" 'cycle-dired-switches
           "zd" 'dired-hide-details-mode
           "M" 'point-to-register
           "'" 'jump-to-register
           "fz" 'dired-narrow-fuzzy
           "fe" 'dired-filter-by-extension
           "fc" 'dired-filter-pop-all
           "ff" 'dired-narrow-regexp
           "d" 'dired-hide-details-mode
           "i" 'image-dired-show-all-from-dir
           "I" (lambda() (interactive) (find-file (dired-get-filename)))
           "D" 'dired-do-delete)
  (:states 'normal
           :keymaps 'image-dired-thumbnail-mode-map
           "l" 'image-dired-forward-image
           "h" 'image-dired-backward-image
           "k" 'image-dired-previous-line
           "j" 'image-dired-next-line
           "m" 'image-dired-toggle-mark-thumb-original-file
           "s" 'image-dired-display-thumbnail-original-image
           "q" 'quit-window
           "SPC" 'image-dired-thumbnail-display-external)
  (:states 'normal
           :keymaps 'image-dired-display-image-mode-map
           "q" 'quit-window))
#+end_src

*** dired-hacks-utils
#+begin_src emacs-lisp
(use-package dired-hacks-utils
  :after dired)
#+end_src

*** dired-narrow
#+begin_src emacs-lisp
(use-package dired-narrow
  :after dired)
#+end_src

*** dired-filter
#+begin_src emacs-lisp
(use-package dired-filter
  :after dired)
#+end_src

*** dired-avfs
#+begin_src emacs-lisp
(use-package dired-avfs
  :after dired)
#+end_src

*** selectrum
#+begin_src emacs-lisp
(use-package selectrum
  :straight (selectrum :host github :repo "raxod502/selectrum")
  :hook
  (after-init . selectrum-mode)
  :config
  ;; (setq selectrum-prescient-enable-filtering nil)

  (setq orderless-skip-highlighting (lambda () selectrum-is-active))

  ;; Completing variable names from `M-:`
  (setq enable-recursive-minibuffers t)

  (setq selectrum-refine-candidates-function #'orderless-filter)
  (setq selectrum-highlight-candidates-function #'orderless-highlight-matches))

(use-package selectrum-prescient
  :after selectrum
  :straight (selectrum-prescient :host github :repo "raxod502/prescient.el"
                                 :files ("selectrum-prescient.el"))
  :config
  (selectrum-prescient-mode +1)
  ;; to save your command history on disk, so the sorting gets more
  ;; intelligent over time
  (prescient-persist-mode +1))
#+end_src

*** orderless
#+begin_src emacs-lisp
(use-package orderless
  :init (icomplete-mode)                ; optional but recommended!
  :config
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

*** consult
#+begin_src emacs-lisp
(use-package consult
  :straight (consult :type git
                     :host github
                     :repo "minad/consult")
  :general
  (:states '(normal insert emacs)
           "M-y" 'consult-yank-pop
           "C-x b" 'consult-buffer
           "C-c c c r" 'consult-ripgrep
           "C-c c n o" 'consult-outline))
#+end_src

*** marginalia
#+begin_src emacs-lisp
;; Enable richer annotations using the Marginalia package
(use-package marginalia
  :after consult
  :bind (:map minibuffer-local-map
              ("C-M-a" . marginalia-cycle)
              ;; When using the Embark package, you can bind `marginalia-cycle' as an Embark action!
              ;;:map embark-general-map
              ;;     ("A" . marginalia-cycle)
              )

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode)

  ;; When using Selectrum, ensure that Selectrum is refreshed when cycling annotations.
  (advice-add #'marginalia-cycle :after
              (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit))))

  ;; Prefer richer, more heavy, annotations over the lighter default variant.
  ;; E.g. M-x will show the documentation string additional to the keybinding.
  ;; By default only the keybinding is shown as annotation.
  ;; Note that there is the command `marginalia-cycle' to
  ;; switch between the annotators.
  (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src

*** embark
#+begin_src emacs-lisp
(use-package embark
  :general
  (:states '(normal insert)
           "C-c c k d" 'embark-dwim
           "C-c c k a" 'embark-act))
#+end_src

*** consult-projectile
#+begin_src emacs-lisp
(use-package consult-projectile
  :straight (consult-projectile
             :type git
             :host gitlab
             :repo "OlMon/consult-projectile"
             :branch "master")
  :after (consult projectile))
#+end_src

*** vterm
Install cmake to be able to install vterm
#+begin_src emacs-lisp
(use-package vterm
  :general
  (:states 'insert
           :keymaps 'vterm-mode-map
           "C-c c r k" 'vterm-send-C-u
           "M-y" 'ram/vterm-consult-yank-pop
           "<tab>" 'ram/vterm-completion))
#+end_src

*** vterm-toggle
#+begin_src emacs-lisp
(use-package vterm-toggle
  :init
  :general
  (:states '(emacs normal insert visual)
           "C-c c v v" '(lambda () (interactive)
                          (if (string-equal (buffer-name) "*vterm*")
                              (vterm-toggle-cd)
                            ;; open vterm in full-screen
                            ;; 4 -> C-u
                            (vterm-toggle-cd 4)))))
#+end_src

*** Undo Fu
#+begin_src emacs-lisp
(use-package undo-fu
  :general
  (:states '(normal)
           "u" 'undo-fu-only-undo
           "C-r" 'undo-fu-only-redo)
  (:states '(insert emacs)
           "C-/" 'undo-fu-only-undo))
#+end_src

*** company
#+begin_src emacs-lisp :tangle no
(use-package company
  :custom
  (company-idle-delay 0)
  :config
  (setq company-capf t)
  ;; (push 'company-capf company-backends)
  ;; (add-to-list 'company-backends '(company-capf company-dabbrev))
  ;; (global-company-mode t)

  (define-key company-active-map (kbd "<tab>") nil)
  :general
  (:states '(emacs insert)
           "C-j" 'company-complete)
  (:states '(normal insert)
           :keymaps 'company-active-map
           "C-n" 'company-select-next-or-abort
           "C-p" 'company-select-previous-or-abort))
#+end_src

*** fancy-dabbrev
#+begin_src emacs-lisp
(use-package fancy-dabbrev
  :init
  (global-fancy-dabbrev-mode t)
  :config
  ;; Let dabbrev searches ignore case and expansions preserve case:
  (setq dabbrev-case-distinction nil)
  (setq dabbrev-case-fold-search t)
  (setq dabbrev-case-replace nil)

  (setq fancy-dabbrev-preview-delay 0.1)
  (setq fancy-dabbrev-preview-context 'before-non-word)

  (setq fancy-dabbrev-expansion-on-preview-only t)
  (setq fancy-dabbrev-indent-command 'tab-to-tab-stop)
  :general
  (:states '(emacs insert)
           "C-c c f d" 'fancy-dabbrev-expand-or-indent))
#+end_src

*** corfu
#+begin_src emacs-lisp
(use-package corfu
  :init
  (corfu-global-mode)
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  :general
  (:states 'insert
           :keymaps 'corfu-mode-map
           "C-n" 'corfu-next)
  (:states 'insert
           "C-." 'completion-at-point))
#+end_src

*** projectile
#+begin_src emacs-lisp
(use-package projectile
  :custom
  (projectile-completion-system 'default)
  (projectile-create-missing-test-files t)
  :config
  ;; (setq projectile-project-search-path '("~/Projects/"))
  (setq projectile-switch-project-action #'projectile-dired)

  (projectile-mode +1)
  (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
  (add-to-list 'projectile-project-root-files-bottom-up "pyproject.toml")
  (add-to-list 'projectile-project-root-files-bottom-up "package.json")
  (add-to-list 'projectile-project-root-files-bottom-up "Makefile")
  (add-to-list 'projectile-project-root-files-bottom-up "Eldev")
  (add-to-list 'projectile-project-root-files-bottom-up "lisp.org")
  (add-to-list 'projectile-project-root-files-bottom-up "dev_deps.ts")

  (projectile-register-project-type 'lisp '("lisp.org" "README.markdown")
                                    :src-dir "src/"
                                    :related-files-fn (list
                                                       (projectile-related-files-fn-groups
                                                        :test
                                                        '(("src/main.lisp"
                                                           "test/main.lisp"))))

                                    :test (format "sbcl --noinform --non-interactive --eval '(ql:quickload \"%s/tests\")' --eval '(asdf:test-system :%s)'" (projectile-project-name) (projectile-project-name))
                                    :test-dir "tests/"
                                    :test-suffix "")

  (projectile-register-project-type 'dart '("pubspec.yaml")
                                    :test "dart run test"
                                    :configure "dart pub get"
                                    :run "webdev serve"
                                    :test-dir "test/"
                                    :test-suffix "_test")

  (projectile-register-project-type 'deno '("dev_deps.ts")
                                    :run "deno run"
                                    :test "deno test test/"
                                    :test-dir "test/"
                                    :test-suffix "_test")

  (projectile-register-project-type 'python '("pyproject.toml")
                                    :project-file "pyproject.toml"
                                    :test "poetry run pytest"
                                    :test-dir "tests/"
                                    :test-suffix "_test")

  (projectile-register-project-type 'npm '("package.json")
                                    :project-file "package.json"
                                    :configure "npm install"
                                    :test "npm test"
                                    :run "npm start"
                                    :test-dir "__tests__"
                                    :test-suffix ".test")

  (projectile-register-project-type 'cpp '("Makefile")
                                    :project-file "Makefile"
                                    :compile "make"
                                    :run "make run"
                                    :test "make test"
                                    :test-dir "tests/"
                                    :test-suffix "_test")

  (projectile-register-project-type 'elisp '("Eldev")
                                    :project-file "Eldev"
                                    :test "eldev test"
                                    :test-dir "tests/"
                                    :test-suffix "-test")

  :general
  (:states '(normal insert emacs motion)
           "<f7>" 'projectile-configure-project)
  (:states 'normal
           :prefix ","
           "t" 'projectile-toggle-between-implementation-and-test)

  (:prefix "C-c p"
           :states '(normal insert emacs motion)
           "f" 'projectile-find-file
           "d" 'projectile-dired
           "r" 'projectile-run-project
           "c" 'projectile-compile-project
           "t" 'projectile-test-project
           "g" 'projectile-ripgrep
           "p" 'projectile-switch-project
           "b" 'projectile-switch-to-buffer
           "v" 'projectile-run-vterm))
#+end_src

*** ansi-color
This fix the problem with the compilation buffer.
The poblem was that when doing projectile-test-project
the compilation buffer add many characters making it
difficult to read.
#+begin_src emacs-lisp
(use-package ansi-color
  :init
  ;; (defun my-colorize-compilation-buffer ()
  ;;   (when (eq major-mode 'compilation-mode)
  ;;     (ansi-color-apply-on-region compilation-filter-start (point))))
  (defun my-colorize-compilation-buffer ()
    (toggle-read-only)
    (ansi-color-apply-on-region (point-min) (point-max))
    (toggle-read-only))
  ;; (defun my-colorize-compilation-buffer ()
  ;;   (when (eq major-mode 'compilation-mode)
  ;;     (ansi-color-apply-on-region compilation-filter-start (point-max))))
  :hook (compilation-filter . my-colorize-compilation-buffer)
  :config
  (add-hook 'compilation-filter-hook 'ansi-color-for-comint-mode-on))
#+end_src

*** magit
#+begin_src emacs-lisp
(use-package magit
  :commands magit-status
  :custom
  ;; When maintaining a number of projects, it sometimes is necessary
  ;; to produce a full list of them with their corresponding Magit
  ;; status. That way you can determine very quickly which repositories
  ;; need to be examined further. (magit-list-repositories)
  (magit-repository-directories
   '(("~/Projects" . 1))))
#+end_src

*** evil-magit
#+begin_src emacs-lisp
(use-package evil-magit
  :after (magit))
#+end_src

*** forge
#+begin_src emacs-lisp
(use-package forge
  :after magit)
#+end_src

*** git-timemachine
#+begin_src emacs-lisp
(use-package git-timemachine
  :after magit
  :general
  (:states 'normal
           :keymaps 'git-timemachine-mode-map
           "p" 'git-timemachine-show-previous-revision
           "n" 'git-timemachine-show-next-revision
           "g" 'git-timemachine-show-nth-revision
           "t" 'git-timemachine-show-revision-fuzzy
           "q" 'git-timemachine-quit
           "w" 'git-timemachine-kill-abbreviated-revision
           "W" 'git-timemachine-kill-revision
           "b" 'git-timemachine-blame
           "c" 'git-timemachine-show-commit
           "?" 'git-timemachine-help))
#+end_src

*** git-link
#+begin_src emacs-lisp
(use-package git-link
  :after magit)
#+end_src

*** yaml-mode
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode ("\\.yaml\\'")
  :hook (yaml-mode . lsp-deferred))
#+end_src

*** prog-mode
#+begin_src emacs-lisp
(use-package prog-mode
  :straight (:type built-in)
  :general
  (:states 'normal
           :keymaps 'prog-mode-map
           "<f6>" 'async-shell-command
           "gc" 'evil-commentary
           "gb" 'evil-jump-backward))
#+end_src

*** c-mode and c++-mode
#+begin_src emacs-lisp
(use-package cc-mode
  :straight (:type built-in)
  :init
  (add-to-list 'auto-mode-alist '("\\.cppm\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.cxx\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.mxx\\'" . c++-mode))
  (defun remove-electric-indent-mode ()
    (electric-indent-local-mode -1))
  :hook
  (c++-mode . remove-electric-indent-mode)
  (c-mode . remove-electric-indent-mode)
  :general
  (:states '(emacs normal insert visual)
           :keymaps '(c++-mode-map c-mode-map)
           "C-;" 'ram/insertSemicolon))
#+end_src

*** make-mode
#+begin_src emacs-lisp
(use-package make-mode
  :straight (:type built-in)
  :config
  (add-hook 'makefile-mode-hook
            (lambda ()
              (setq indent-tabs-mode t)
              (setq-default indent-tabs-mode t)
              (setq tab-width 8))))
#+end_src

*** js-mode
The actual problem is that you passed the wrong library name to use-package. You
used js-mode, but there is no js-mode.el on the load-path. The filename is
js.el, thus you should pass js to use-package.  This is independent of
straight.el.
#+begin_src emacs-lisp
(use-package js
  :defer 3
  :config
  (add-hook 'js-mode-hook (lambda () (setq js-indent-level 2
                                           tab-width 2)))
  (general-define-key
   :states '(emacs normal insert visual)
   :keymaps 'js-mode-map
   "<f5>" (lambda()
            (interactive)
            (async-shell-command
             (concat "node " (buffer-file-name)) "*javascript output*"))
   "C-;" 'ram/insertSemicolon))
#+end_src

*** python-mode
#+begin_src emacs-lisp
;; The package is "python" but the mode is "python-mode":
(use-package python
  :straight (:type built-in)
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode)
  :config
  (general-define-key
   :states 'normal
   :keymaps 'python-mode-map
   "<f5>" (lambda()
            (interactive)
            (async-shell-command
             (concat "python " (buffer-file-name)) "*python output*"))))

#+end_src

*** pyvenv
#+begin_src emacs-lisp
(use-package pyenv-mode
  :defer 5
  :init
  (add-to-list 'exec-path "~/bin/pyenv/shims")
  (setq pyenv-installation-dir "~/bin/pyenv")
  :config
  (pyenv-mode))
#+end_src

*** lisp-interaction-mode
#+begin_src emacs-lisp
(use-package elisp-mode
  :straight nil
  :general
  (:states 'normal
           :keymaps 'lisp-interaction-mode-map
           "gr" 'eval-defun))
#+end_src

*** go-mode
#+begin_src emacs-lisp
(use-package go-mode
  :mode "\\.go\\'"
  :general
  (:states 'normal
           :keymaps 'go-mode-map
           "<f5>" (lambda()
                    (interactive)
                    (async-shell-command
                     (concat "go run " (buffer-file-name)) "*go output*"))))
#+end_src

*** json-mode
#+begin_src emacs-lisp
(use-package json-mode
  :mode "\\.json\\'")
#+end_src

*** dart-mode
#+begin_src emacs-lisp
(use-package dart-mode
  :general
  (:states '(emacs normal insert visual)
           :keymaps 'dart-mode-map
           "<f5>" (lambda()
                    (interactive)
                    (async-shell-command
                     (concat "dart --enable-experiment=non-nullable " (buffer-file-name)) "*dart output*"))
           "C-;" 'ram/insertSemicolon))
#+end_src

*** haskell-mode
#+begin_src emacs-lisp
(use-package haskell-mode
  :mode ("\\.hs\\'")
  :general
  (:states '(emacs normal insert visual)
           :keymaps 'haskell-mode-map
           "<f5>" (lambda()
                    (interactive)
                    (async-shell-command
                     (concat "ghc -e main " (buffer-name)) "*haskell output*"))))
#+end_src

*** typescript-mode
#+begin_src emacs-lisp
(use-package typescript-mode
  :mode ("\\.ts\\'"))
#+end_src

*** sly (common-lisp)
#+begin_src emacs-lisp
(use-package sly
  :straight (sly :type git :host github :repo "joaotavora/sly")
  :custom (inferior-lisp-program "~/bin/sbcl/bin/sbcl --noinform")
  :commands sly
  :init
  ;; Activate common lisp highlight syntax to SBCL configuration file
  (add-to-list 'auto-mode-alist '("\\.sbclrc\\'" . lisp-mode))
  ;; Activate common lisp highlight syntax to Stumpwm configuration file
  (add-to-list 'auto-mode-alist '("\\.stumpwmrc\\'" . lisp-mode))
  :general
  (:states 'normal
           :keymaps 'sly-mode-map
           "K" 'sly-documentation-lookup
           "g i" 'sly-autodoc-manually
           "g d" 'sly-edit-definition))
#+end_src

*** geiser (guile)
#+begin_src emacs-lisp
(use-package geiser
  :straight (geiser :type git :host gitlab :repo "emacs-geiser/geiser")
  :commands geiser)

(use-package geiser-guile
  :straight (geiser-guile :type git :host gitlab :repo "emacs-geiser/guile")
  :after geiser)
#+end_src

*** lsp-mode
#+begin_src emacs-lisp
(use-package lsp-mode
  :straight (lsp-mode :type git :host github :repo "emacs-lsp/lsp-mode")
  :hook
  ((go-mode . lsp-deferred)
   (python-mode . lsp-deferred)
   (js-mode . lsp-deferred)
   (c++-mode . lsp-deferred)
   (c-mode . lsp-deferred)
   (before-save . lsp-format-buffer)
   (before-save . lsp-organize-imports))
  :custom
  (lsp-auto-guess-root t)                ;; auto guess root
  ;; disable showing documentation in the minibuffer
  ;; (lsp-eldoc-hook t)
  ;; (lsp-signature-auto-activate nil)
  ;; (lsp-signature-doc-lines 1)
  ;; (lsp-signature-render-documentation nil)
  (lsp-gopls-complete-unimported t)
  (lsp-prefer-capf t)                    ;; using `company-capf' by default
  (lsp-signature-auto-activate nil)
  (lsp-lens-enable nil)
  (lsp-ui-doc-enable nil)
  (lsp-semantic-highlighting 'immediate)
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-clients-clangd-executable (concat (getenv "HOME") "/bin/clang/bin/clangd"))
  (lsp-clients-clangd-args '("--header-insertion-decorators=0" "-j=4" "--suggest-missing-includes" "-background-index" "-log=error" "--clang-tidy"))
  :init
  ;; https://twitter.com/yonchovski/status/1384899744670093315
  (setq lsp-use-plists t)
  :general
  (:states 'normal
           :keymaps 'lsp-mode-map
           "<f9>" 'lsp-ui-imenu
           "gd" 'lsp-find-definition
           "gp" 'lsp-ui-peek-find-references
           "K" 'lsp-ui-doc-mode))
#+end_src

*** lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  ;; (lsp-ui-doc-header t)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-position 'bottom) ;; top, bottom, or at-point
  ;; (lsp-ui-doc-max-width 120)
  ;; (lsp-ui-doc-max-height 30)
  ;; (lsp-ui-doc-use-childframe t)
  ;; (lsp-ui-doc-use-webkit t)
  ;; (lsp-ui-doc-enable t)
  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-show-code-actions nil)
  (lsp-ui-sideline-show-symbol t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-sideline-show-diagnostics nil)
  ;; lsp-ui-imenu
  (lsp-ui-imenu-enable t)
  (lsp-ui-imenu-kind-position 'top))
#+end_src

*** lsp-dart
#+begin_src emacs-lisp
(use-package lsp-dart
  :straight (lsp-dart :type git :host github :repo "emacs-lsp/lsp-dart")
  :custom
  (lsp-dart-sdk-dir "~/bin/flutter/bin/cache/dart-sdk")
  :hook (dart-mode . lsp-deferred))
#+end_src

*** lsp-pyright
#+begin_src emacs-lisp
(use-package lsp-pyright
  :after lsp
  :straight (lsp-pyright :type git :host github :repo "emacs-lsp/lsp-pyright")
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp))))  ; or lsp-deferred
#+end_src

*** treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :defer 3)
#+end_src

*** lsp-treemacs
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after (lsp-mode treemacs)
  :config
  (lsp-treemacs-sync-mode 1))
#+end_src

*** consult-lsp
#+begin_src emacs-lisp
(use-package consult-lsp
  :straight (consult-lsp :type git :host github :repo "gagbo/consult-lsp")
  :after (consult lsp-mode selectrum))
#+end_src

*** dap-mode
#+begin_src emacs-lisp
(use-package dap-mode
  :config
  (setq dap-auto-configure-features '(sessions locals controls tooltip))
  (require 'dap-cpptools)
  (require 'dap-gdb-lldb)
  (require 'dap-lldb)
  (require 'dap-python)
  (require 'dap-chrome)
  (setq dap-print-io t)
  :bind
  (:map dap-mode-map
        (("<f12>" . dap-debug)
         ("<f8>" . dap-continue)
         ("<f9>" . dap-next)
         ("<M-f11>" . dap-step-in)
         ("C-M-<f11>" . dap-step-out)
         ("<f7>" . dap-breakpoint-toggle))))
#+end_src

*** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :hook
  ((go-mode . flycheck-mode)
   (python-mode . flycheck-mode)
   (dart-mode . flycheck-mode)
   (js-mode . flycheck-mode))
  :custom
  (lsp-prefer-flymake nil))
#+end_src

*** aggressive-indent
#+begin_src emacs-lisp
(use-package aggressive-indent
  :hook
  ((web-mode . aggressive-indent-mode)
   (json-mode . aggressive-indent-mode)
   (lisp-mode . aggressive-indent-mode)
   (emacs-lisp-mode . aggressive-indent-mode)))
#+end_src

*** avy
Search for character
#+begin_src emacs-lisp
(use-package avy
  :general
  (:states '(normal emacs insert motion)
           "C-c c a f" 'avy-goto-char-2))
#+end_src

*** smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :config
  (require 'smartparens-config)

  (with-eval-after-load 'smartparens
    (sp-with-modes
        '(c++-mode dart-mode go-mode js-mode)
      (sp-local-pair "{" nil :post-handlers '(:add ("||\n[i]" "RET")))))

  (with-eval-after-load 'smartparens
    (sp-with-modes
        '(c++-mode dart-mode go-mode js-mode)
      (sp-local-pair "(" nil :post-handlers '(:add ("||\n[i]" "RET")))))

  (sp-local-pair '(sly-mrepl-mode) "'" "'" :actions nil)
  (add-hook 'js-mode-hook #'smartparens-mode)
  (add-hook 'c++-mode-hook #'smartparens-mode)
  (add-hook 'go-mode-hook #'smartparens-mode)
  ;; Activate smartparens in minibuffer
  (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-mode)

  ;; (smartparens-global-mode t)
  )
#+end_src

*** evil-smartparens
#+begin_src emacs-lisp :tangle no
(use-package evil-smartparens
  :after smartparens
  :config
  (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
#+end_src

*** whitespace
#+begin_src emacs-lisp
(use-package whitespace
  :straight (:type built-in)
  :hook
  (prog-mode . whitespace-mode)
  (text-mode . whitespace-mode)
  :custom
  (whitespace-style '(face empty indentation::space tab trailing)))
#+end_src

*** ctrlf
#+begin_src emacs-lisp
(use-package ctrlf
  :straight (ctrlf :host github :repo "raxod502/ctrlf")
  :bind ("C-s" . ctrlf-forward-literal)
  :config
  (ctrlf-mode +1))
#+end_src

*** expand-region
#+begin_src emacs-lisp
(use-package expand-region
  :general
  (:states '(normal motion)
           "SPC" 'er/expand-region))
#+end_src

*** lispy
#+begin_src emacs-lisp
(use-package lispy
  :defer 10
  :hook ((common-lisp-mode . lispy-mode)
         (emacs-lisp-mode . lispy-mode)
         (lisp-mode . lispy-mode)
         (scheme-mode . lispy-mode)
         (racket-mode . lispy-mode)
         (hy-mode . lispy-mode)
         (lfe-mode . lispy-mode)
         (clojure-mode . lispy-mode))
  :general
  (:states '(emacs insert)
           :keymaps 'lispy-mode-map
           "M-a" 'lispy-wrap-round))
#+end_src

*** lispyville
#+begin_src emacs-lisp
(use-package lispyville
  :after lispy
  :hook ((lispy-mode . lispyville-mode))
  ;; :init
  ;; (general-add-hook '(lisp-interaction-mode-hook emacs-lisp-mode-hook lisp-mode-hook) #'lispyville-mode)
  :config
  (lispyville-set-key-theme '(operators
                              additional-insert
                              c-w additional
                              text-objects
                              atom-motions
                              additional-motions
                              wrap
                              slurp/barf-lispy)))
#+end_src

*** hydra
#+begin_src emacs-lisp
(use-package hydra
  :defer 5)
#+end_src

*** org-fc
sudo apt install gawk
#+begin_src emacs-lisp
(use-package org-fc
  :defer 5
  :straight
  (org-fc
   :type git
   :host github
   :repo "l3kn/org-fc"
   :files (:defaults "awk" "demo.org"))
  :custom
  (org-fc-directories '("~/org/roams"))
  :config
  (require 'org-fc-keymap-hint)
  (require 'org-fc-hydra)
  (setq org-tag-alist '(("dart")
                        ("fundamentals")
                        ("algorithms")
                        ("C")
                        ("cpp")
                        ("emacs")
                        ("javascript")
                        ("lisp")
                        ("linux")
                        ("fp")
                        ("bash")
                        ("englishVoc")
                        ("orgmode")
                        ("chess")
                        ("math")))

  ;; (setq org-tag-alist '(dart
  ;;                       fundamentals
  ;;                       algorithms
  ;;                       cpp
  ;;                       javascript
  ;;                       linux
  ;;                       fp
  ;;                       bash
  ;;                       englishVoc
  ;;                       math
  ;;                       ))
  (add-to-list 'org-fc-custom-contexts
               '(dart-cards . (:filter (tag "dart"))))

  (add-to-list 'org-fc-custom-contexts
               '(fundamentals-cards . (:filter (tag "fundamentals"))))

  (add-to-list 'org-fc-custom-contexts
               '(algorithms-cards . (:filter (tag "algorithms"))))

  (add-to-list 'org-fc-custom-contexts
               '(cpp-cards . (:filter (tag "cpp"))))

  (add-to-list 'org-fc-custom-contexts
               '(cpp-cards . (:filter (tag "C"))))

  (add-to-list 'org-fc-custom-contexts
               '(emacs-cards . (:filter (tag "emacs"))))

  (add-to-list 'org-fc-custom-contexts
               '(javascript-cards . (:filter (tag "javascript"))))

  (add-to-list 'org-fc-custom-contexts
               '(linux-cards . (:filter (tag "linux"))))

  (add-to-list 'org-fc-custom-contexts
               '(lisp-cards . (:filter (tag "lisp"))))

  (add-to-list 'org-fc-custom-contexts
               '(fp-cards . (:filter (tag "fp"))))

  (add-to-list 'org-fc-custom-contexts
               '(bash-cards . (:filter (tag "bash"))))

  (add-to-list 'org-fc-custom-contexts
               '(chess-cards . (:filter (tag "chess"))))

  (add-to-list 'org-fc-custom-contexts
               '(orgmode-cards . (:filter (tag "orgmode"))))

  (add-to-list 'org-fc-custom-contexts
               '(englishVoc-cards . (:filter (tag "englishVoc"))))

  (add-to-list 'org-fc-custom-contexts
               '(math-cards . (:filter (tag "math"))))

  (general-define-key
   :states 'normal
   "C-c f" 'org-fc-hydra/body)

  (general-define-key
   :definer 'minor-mode
   :states 'normal
   :keymaps 'org-fc-review-flip-mode
   "RET" 'org-fc-review-flip
   "n" 'org-fc-review-flip
   "s" 'org-fc-review-suspend-card
   "p" 'org-fc-review-edit
   "q" 'org-fc-review-quit)

  (general-define-key
   :definer 'minor-mode
   :states 'normal
   :keymaps 'org-fc-review-rate-mode
   "a" 'org-fc-review-rate-again
   "h" 'org-fc-review-rate-hard
   "g" 'org-fc-review-rate-good
   "e" 'org-fc-review-rate-easy
   "p" 'org-fc-review-edit
   "s" 'org-fc-review-suspend-card
   "q" 'org-fc-review-quit)

  (general-define-key
   :definer 'minor-mode
   :states 'normal
   :keymaps 'org-fc-review-edit-mode
   "C-c C-c" 'org-fc-review-resume
   "C-c C-k" 'org-fc-review-quit))
#+end_src

*** org-protocol
Create the file *~/.local/share/applications/org-protocol.desktop* containing:

#+begin_src sh :tangle no
[Desktop Entry]
Name=org-protocol
Exec=emacsclient %u
Type=Application
Terminal=false
Categories=System;
MimeType=x-scheme-handler/org-protocol;
#+end_src

#+begin_src emacs-lisp
(use-package org-protocol
  :straight (:type built-in)
  )
#+end_src

*** org-protocol-capture-html
#+begin_src emacs-lisp
(use-package org-protocol-capture-html
  :straight (org-protocol-capture-html
             :type git
             :host github
             :repo "alphapapa/org-protocol-capture-html"
             )
  :after org-protocol
  :config
  (setq org-capture-templates
        `(("w" "Web site" entry
           (file "")
           "* %a :website:\n\n%U %?\n\n%:initial"))))
#+end_src

*** org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :straight (org-roam
             :type git
             :host github
             :repo "org-roam/org-roam"
             :branch "v2")
  :custom
  (org-roam-directory "~/org/roams")
  :config
  (org-roam-setup)
  :general
  (:prefix "C-c c"
           :states '(normal motion insert emacs)
           "r n" 'org-roam-node-find
           "r l" 'org-roam-buffer-toggle
           "r i" 'org-roam-node-insert
           "r d" 'org-id-get-create
           "r t" 'org-roam-tag-add
           "r a" 'org-roam-alias-add))
#+end_src

*** rg
#+begin_src elisp
(use-package rg
  :config
  (rg-define-search ram/search-everything-at-roams
    :query ask
    :format regexp
    :dir "/home/last/org/roams/"
    :files "*.org"
    :confirm prefix)

  (rg-define-search ram/grep-vc-or-dir
    :query ask
    :format regexp
    :files "everything"
    :dir (let ((vc (vc-root-dir)))
           (if vc
               vc                         ; search root project dir
             default-directory))          ; or from the current dir
    :confirm prefix
    :flags ("--hidden -g !.git"))


  :general
  (:states '(normal motion)
           :prefix "M-s"
           "g" 'ram/grep-vc-or-dir
           "r" 'ram/search-everything-at-roams))
#+end_src

*** yasnippet
#+begin_src elisp
(use-package yasnippet
  :bind
  (:map yas-minor-mode-map
        ("TAB" . nil)
        ([tab] . nil))
  :hook
  (prog-mode . yas-minor-mode)
  (text-mode . yas-minor-mode)
  :custom
  (yas-snippet-dirs
   '("~/Projects/dots/snips/yasnippet"))
  :config
  (yas-reload-all)
  :general
  (:states 'visual
           :prefix ","
           "y" 'yas-insert-snippet)
  (:states 'insert
           "C-c c y i" 'yas-expand)
  (:states 'insert
           :keymaps 'yas-minor-mode-map
           "M-l" 'yas-next-field
           "M-h" 'yas-prev-field))
#+end_src

*** web-mode
#+begin_src emacs-lisp
(use-package web-mode
  :mode "\\.html\\'"
  :custom
  (web-mode-enable-auto-expanding t)
  (web-mode-markup-indent-offset 2)
  (web-mode-css-indent-offset 2)
  (web-mode-code-indent-offset 2)
  (web-mode-enable-auto-pairing t)
  (web-mode-enable-css-colorization t)
  (web-mode-enable-current-element-highlight t)
  :config
  (set-face-background 'web-mode-current-element-highlight-face "#ff6c6b")
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode)))
#+end_src

*** org-cliplink
#+begin_src emacs-lisp
(use-package org-cliplink
  :commands org-cliplink)
#+end_src

*** calibredb.el
#+begin_src emacs-lisp
(use-package calibredb
  :commands calibredb
  :init
  (autoload 'calibredb "calibredb")
  :config
  (setq calibredb-author-width 0)
  (setq calibredb-id-width 0)
  (setq calibredb-comment-width 0)
  (setq sql-sqlite-program "~/bin/sqlite/sqlite3")
  (setq calibredb-root-dir "~/Documents/books")
  (setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))
  (setq calibredb-program "/usr/bin/calibredb")
  (setq calibredb-library-alist '(("~/Documents/books")
                                  ("~/Documents/articles"))))
#+end_src

*** sudo-edit
#+begin_src emacs-lisp
(use-package sudo-edit
  :commands sudo-edit)
#+end_src

*** cmake-mode
#+begin_src emacs-lisp
;; (straight-use-package '(cmake-mode :local-repo "/home/last/.emacs.d/local-packages/cmake-mode.el" :type nil))
;;(straight-use-package '(cmake-mode :local-repo "/home/last/.emacs.d/local-packages/cmake-mode/cmake-mode.el"))
(use-package cmake-mode
  :mode "\\CMakeLists.txt\\'")
;;(straight-use-package '(cmake-mode :local-repo "~/.emacs.d/local-packages/cmake-mode" :source nil))
#+end_src

*** skeletor
#+begin_src emacs-lisp
(use-package skeletor
  :commands (skeletor-create-project skeletor-create-project-at ram/create-kata ram/create-project)
  :custom
  (skeletor-user-directory "~/Projects/dots/project-skeletons")
  :init
  (skeletor-define-template "c-make-munit"
    :no-license? t
    :no-git? t
    :title "C Make Munit Kata")

  (skeletor-define-template "cpp-hello-world"
    :no-license? t
    :no-git? t
    :title "Cpp Hellow World")

  (skeletor-define-template "cpp-make-fmt-ut-as-headers"
    :no-license? t
    :no-git? t
    :title "Cpp Make Fmt Ut Kata")

  (skeletor-define-template "elisp"
    :no-git? t
    :no-license? t
    :title "Elisp Kata")

  (skeletor-define-template "lisp-fiveam"
    :no-git? t
    :no-license? t
    :title "Lisp Fiveam Kata")

  (skeletor-define-template "lisp"
    :no-git? t
    :no-license? t
    :title "Lisp Kata"
    :after-creation
    (lambda (dir)
      (skeletor-async-shell-command (format "ln -s %s ~/Projects/lisp/katas" dir))))

  (skeletor-define-template "js"
    :no-git? t
    :no-license? t
    :title "Javascript Kata"
    :after-creation
    (lambda (dir)
      (skeletor-async-shell-command "npm install")))

  (skeletor-define-template "typescript"
    :no-git? t
    :no-license? t
    :title "Typescript Kata")

  (skeletor-define-constructor "Dart Project"
    :no-license? t
    :no-git? t
    :initialise
    (lambda (spec)
      (let-alist spec
        (skeletor-shell-command
         (format "dart create -t %s %s" (ram/get-dart-template) (shell-quote-argument .project-name))
         .project-dir))))

  (skeletor-define-constructor "Dart Kata"
    :no-license? t
    :no-git? t
    :initialise
    (lambda (spec)
      (let-alist spec
        (skeletor-shell-command
         (format "dart create -t package-simple %s" (shell-quote-argument .project-name))
         .project-dir))))

  (skeletor-define-constructor "Dcli Script"
    :no-license? t
    :no-git? t
    :initialise
    (lambda (spec)
      (let-alist spec
        (skeletor-shell-command
         (format "dcli create %s" (shell-quote-argument .project-name))
         .project-dir))))

  (skeletor-define-constructor "Flutter Project"
    :no-license? t
    :no-git? t
    :initialise
    (lambda (spec)
      (let-alist spec
        (skeletor-shell-command
         (format "flutter create -t %s %s" (ram/get-flutter-template) (shell-quote-argument .project-name))
         .project-dir))))

  (skeletor-define-constructor "Python Project"
    :no-license? t
    :no-git? t
    :initialise
    (lambda (spec)
      (let-alist spec
        (skeletor-shell-command
         (format "poetry new %s" (shell-quote-argument .project-name))
         .project-dir)))
    :after-creation
    (lambda (dir)
      (skeletor-async-shell-command "poetry install")))

  (skeletor-define-constructor "Python Kata"
    :no-license? t
    :no-git? t
    :initialise
    (lambda (spec)
      (let-alist spec
        (skeletor-shell-command
         (format "poetry new %s" (shell-quote-argument .project-name))
         .project-dir)))))
#+end_src

*** helpful
#+begin_src emacs-lisp
(use-package helpful
  :general
  (:states '(normal visual emacs motion)
           :prefix "C-h"
           "v" 'helpful-variable
           "f" 'helpful-callable
           "k" 'helpful-key)
  (:states 'normal
           :keymaps 'helpful-mode-map
           "q" 'helpful-kill-buffers))
#+end_src

*** elfeed
#+begin_src emacs-lisp
(use-package elfeed
  :config
  (load-file "~/.emacs.d/feeds.el")
  (setq elfeed-feeds (ram/feeds))
  :general
  (:states 'normal
           :keymaps 'elfeed-search-mode-map
           "r" 'elfeed-update
           "l" 'elfeed-search-show-entry
           "s" 'elfeed-search-live-filter
           "c" 'elfeed-search-clear-filter
           "q" 'elfeed-search-quit-window)
  (:states 'normal
           :keymaps 'elfeed-show-mode-map
           "b" 'elfeed-search-browse-url
           "q" 'elfeed-kill-buffer))
#+end_src

*** proced
Build-in package. Think htop but for emacs.
#+begin_src emacs-lisp
(use-package proced
  :straight (:type built-in)
  :commands proced
  :config
  ;; makes it auto-update
  (setq proced-auto-update-interval 1)
  (add-hook 'proced-mode-hook
            (lambda ()
              (proced-toggle-auto-update 1))))
#+end_src

*** languagetool
#+begin_src emacs-lisp
(use-package languagetool
  :defer t
  :commands (languagetool-check
	           languagetool-clear-buffer
	           languagetool-correct-at-point
	           languagetool-correct-buffer
	           languagetool-set-language)
  :config
  (setq languagetool-language-tool-jar "~/bin/languagetool/languagetool-commandline.jar"
	      languagetool-server-language-tool-jar "~/bin/languagetool/languagetool-server.jar"
	      languagetool-java-arguments '("-Dfile.encoding=UTF-8")
	      languagetool-default-language "en-GB"))
#+end_src

*** ace-window
#+begin_src emacs-lisp
(use-package ace-window
  :general
  (:states 'normal
           "M-o" 'ace-window))
#+end_src

*** org-download
#+begin_src emacs-lisp
(use-package org-download
  :commands org-download-clipboard
  :config
  (setq-default org-download-image-dir "~/org/roams/img"))
#+end_src

*** pocket-reader

#+begin_src emacs-lisp
(use-package pocket-reader)
#+end_src

*** emacs-test-simple
#+begin_src emacs-lisp :tangle no
(use-package test-simple)
#+end_src

*** buttercup (tdd)
#+begin_src emacs-lisp
(use-package buttercup)
#+end_src

*** s.el
String manipulation library
#+begin_src emacs-lisp
(use-package s)
#+end_src

*** f.el
Modern API for working with files and directories
#+begin_src emacs-lisp
(use-package f)
#+end_src

*** dash.el
A modern list API
#+begin_src emacs-lisp
(use-package dash)
#+end_src

*** ht.el
The missing hash table library for Emacs
#+begin_src emacs-lisp
(use-package ht)
#+end_src
*** let-alist
#+begin_src emacs-lisp
(use-package let-alist)
#+end_src

** Functions
*** Make ~l~ to behave as expected in dired
#+begin_src emacs-lisp
(defun ram/dired-open()
  (interactive)
  (cond
   ;; use dired-find-file if it is a directory
   ((file-directory-p (dired-get-file-for-visit))
    (dired-find-file))
   ;; use dired-find-file if the mime type of the file is emacs.desktop
   ((string= "emacs.desktop" (string-trim-right (shell-command-to-string
                                                 (format "xdg-mime query filetype %s | xargs xdg-mime query default"
                                                         (shell-quote-argument (dired-get-file-for-visit))))))
    (dired-find-file))
   (t
    ;; use xdg-open for everything else
    ;; start-process quote the arguments so you do not need the sell-quote-argument function
    (start-process "ram-dired-open" nil "xdg-open" (dired-get-file-for-visit)))))
#+end_src
*** vterm functions
**** Find file
#+begin_src emacs-lisp
(with-eval-after-load 'vterm
  (push (list "find-file-below"
              (lambda (path)
                (if-let* ((buf (find-file-noselect path))
                          (window (display-buffer-below-selected buf nil)))
                    (select-window window)
                  (message "Failed to open file: %s" path))))
        vterm-eval-cmds))
#+end_src

**** Stay in the same positin when going back to normal mode
#+begin_src emacs-lisp
(with-eval-after-load 'vterm
  (defun evil-collection-vterm-escape-stay ()
    "Go back to normal state but don't move
cursor backwards. Moving cursor backwards is the default vim behavior but it is
not appropriate in some cases like terminals."
    (setq-local evil-move-cursor-back nil))

  (add-hook 'vterm-mode-hook #'evil-collection-vterm-escape-stay))
#+end_src

**** Vterm completion for files, directories, history and programs
#+begin_src emacs-lisp
(with-eval-after-load 'vterm
  (defun ram/get-full-list ()
    (let ((program-list (split-string (shell-command-to-string "compgen -c") "\n" t ))
          (file-directory-list (split-string (shell-command-to-string "compgen -f") "\n" t ))
          (history-list (with-temp-buffer
                          (insert-file-contents "~/.bash_history")
                          (split-string (buffer-string) "\n" t))))

      (delete-dups (append program-list file-directory-list history-list))))

  (defun ram/vterm-completion-choose-item ()
    (completing-read "Choose: " (ram/get-full-list) nil nil (thing-at-point 'word 'no-properties)))

  (defun ram/vterm-completion ()
    (interactive)
    (vterm-directory-sync)
    (let ((ram/vterm-chosen-item (ram/vterm-completion-choose-item)))
      (when (thing-at-point 'word)
        (vterm-send-meta-backspace))
      (vterm-send-string ram/vterm-chosen-item))))
#+end_src

**** Consult-yank for vterm
#+begin_src emacs-lisp
(with-eval-after-load 'vterm
  (advice-add #'insert-for-yank
              :around
              (defun ram/insert-for-yank-vterm-shim (orig-fun &rest args)
                (if (eq major-mode 'vterm-mode)
                    (let ((inhibit-read-only t))
                      (apply #'vterm-insert args))
                  (apply orig-fun args))))

  (defun ram/vterm-consult-yank-pop (&optional arg)
    "A `consult-yank-pop' wrapper for vterm compatibility."
    (interactive "p")
    (let ((inhibit-read-only t))
      (consult-yank-pop arg))))
#+end_src

**** less like function for vterm
#+begin_src emacs-lisp
(with-eval-after-load 'vterm
  (defun ram/menos ()
    (switch-to-buffer "menos")
    (when (get-buffer "menos")
      (with-current-buffer "menos")
      (erase-buffer)
      (insert (substring-no-properties (x-get-clipboard)))))
  ;; (current-kill 0)

  (push (list "menos" 'ram/menos)
        vterm-eval-cmds))
#+end_src

**** Open man pages in a emacs buffer
#+begin_src emacs-lisp
(with-eval-after-load 'vterm
  (push (list "man" 'man)
        vterm-eval-cmds))
#+end_src

**** Update the CWD
#+begin_src emacs-lisp
(defun vterm-directory-sync ()
  "Synchronize current working directory."
  (interactive)
  (when vterm--process
    (let* ((pid (process-id vterm--process))
           (dir (file-truename (format "/proc/%d/cwd/" pid))))
      (setq default-directory dir))))

(with-eval-after-load 'vterm
  (add-to-list 'vterm-eval-cmds '("update-pwd" (lambda (path) (setq default-directory path)))))
#+end_src

*** Get dart template (skeletor)
#+begin_src emacs-lisp
(defun ram/get-dart-template ()
  (->> (shell-command-to-string "dart create")
       (s-slice-at "^Available templates")
       cadr
       (s-split "\n")
       cdr
       (remove "")
       (mapcar 's-trim)
       (completing-read "Choose: ")
       (s-split ":")
       car))
#+end_src

*** Get flutter template (skeletor)
#+begin_src emacs-lisp
(defun ram/get-flutter-template ()
  (completing-read "Choose: " '("app" "module" "package" "plugin")))
#+end_src

*** Create a project (skeletor)
#+begin_src emacs-lisp
(defun ram/get-skeleton (skeleton)
  (--first (equal skeleton (SkeletorProjectType-title it))
           skeletor--project-types))

(defun ram/cpp-create-project ()
  (let ((project (completing-read "Choose: " '("Cpp Hellow World"
                                               "C++ Make Project"
                                               "C++ Cmake Project"
                                               "C++ Build2 Project"))))

    (skeletor-create-project-at "~/Projects/cpp" (ram/get-skeleton project))))

(defun ram/dcli-create-script ()
  (skeletor-create-project-at "~/bin/scripts" (ram/get-skeleton "Dcli Script")))

(defun ram/dart-create-project ()
  (skeletor-create-project-at "~/Projects/dart" (ram/get-skeleton "Dart Project")))

(defun ram/flutter-create-project ()
  (skeletor-create-project-at "~/Projects/flutter" (ram/get-skeleton "Flutter Project")))

(defun ram/python-create-project ()
  (skeletor-create-project-at "~/Projects/python" (ram/get-skeleton "Python Project")))

(defun ram/create-project ()
  (interactive)
  (let ((project (completing-read "Choose: " '("C++ Project"
                                               "Dart Project"
                                               "Dcli Project"
                                               "Flutter Project"
                                               "Python Project"))))
    (pcase (list project)
      ('("C++ Project") (ram/cpp-create-project))
      ('("Dart Project") (ram/dart-create-project))
      ('("Dcli Project") (ram/dcli-create-script))
      ('("Flutter Project") (ram/flutter-create-project))
      ('("Python Project") (ram/python-create-project)))))
#+end_src

*** Create a kata (skeletor)
#+begin_src emacs-lisp
(defun ram/create-kata ()
  (interactive)
  (let ((kata (completing-read "Choose: " '("C Make Munit Kata"
                                            "Cpp Make Fmt Ut Kata"
                                            "Dart Kata"
                                            "Elisp Kata"
                                            "Javascript Kata"
                                            "Lisp Kata"
                                            "Lisp Fiveam Kata"
                                            "Python Kata"
                                            "Typescript Kata"))))
    (skeletor-create-project-at default-directory
                                (ram/get-skeleton kata))))
#+end_src

*** Autocomplete global org-mode tags
#+begin_src emacs-lisp
(defun ram/ident-org-tags()
  (interactive)
  (let ((current-prefix-arg '(4))) ;; emulate C-u
    (call-interactively 'org-set-tags-command))) ;; invoke org-set-tags-command interactively

(defun ram/org-swap-tags (tags)
  "Replace any tags on the current headline with TAGS.

The assumption is that TAGS will be a string conforming to Org Mode's
tag format specifications, or nil to remove all tags."
  (let ((old-tags (org-get-tags-string))
        (tags (if tags
                  (concat " " tags)
                "")))
    (save-excursion
      (beginning-of-line)
      (re-search-forward
       (concat "[ \t]*" (regexp-quote old-tags) "[ \t]*$")
       (line-end-position) t)
      (replace-match tags)
      (org-set-tags t)
      )))

(defun ram/org-set-tags (tag)
  "Add TAG if it is not in the list of tags, remove it otherwise.

TAG is chosen interactively from the global tags completion table."
  (interactive
   (list (let ((org-last-tags-completion-table
                (if (derived-mode-p 'org-mode)
                    (org-uniquify
                     (delq nil (append (org-get-buffer-tags)
                                       (org-global-tags-completion-table))))
                  (org-global-tags-completion-table))))
           (org-icompleting-read
            "Tag: " 'org-tags-completion-function nil nil nil
            'org-tags-history))))
  (let* ((cur-list (org-get-tags))
         (new-tags (mapconcat 'identity
                              (if (member tag cur-list)
                                  (delete tag cur-list)
                                (append cur-list (list tag)))
                              ":"))
         (new (if (> (length new-tags) 1) (concat " :" new-tags ":")
                nil)))
    (ram/org-swap-tags new)
    ))
#+end_src
*** Rename files in numeric sequence
#+begin_src emacs-lisp
(defun ram/rename-files-numeric-sequence ()
  (interactive)
  (let ((sequence 1)
        (files (directory-files-recursively default-directory "")))
    (while files
      (rename-file (car files)
                   (format "%s%04d.%s"
                           (file-name-directory (car files))
                           sequence
                           (file-name-extension (car files))))
      (setq files (cdr files))
      (setq sequence (1+ sequence)))))
#+end_src
*** select last pasted text (like gv)
#+begin_src emacs-lisp
(defun ram/evil-select-pasted ()
  (interactive)
  (let ((start-marker (evil-get-marker ?\[))
        (end-marker (evil-get-marker ?\])))
    (evil-visual-select start-marker end-marker)))
#+end_src
*** Insert list of files in buffer
Insert list of files recursively
and also replace the path of the
directories with "*" org-mode headers
#+begin_src emacs-lisp
(defun ram/ls-insert ()
  (interactive)
  (save-excursion
    (insert (shell-command-to-string
             (format "ls -1R %s"
                     ;; shell-quote-argument escapes white spaces on the file name
                     (shell-quote-argument
                      ;; remove all properties from a text string with substring-no-properties
                      (substring-no-properties
                       (car kill-ring))))))
    (replace-string
     (format "%s/"(substring-no-properties (car kill-ring)))
     "* "
     nil
     (point-min)
     (point-max))))
#+end_src
*** Change the default file application to emacs (mime)
#+begin_src emacs-lisp
(defun ram/change-mime-emacs ()
  (interactive)
  (message "The old default app was %s\n" (shell-command-to-string
                                           (format "xdg-mime query filetype %s | xargs xdg-mime query default"
                                                   (shell-quote-argument (dired-get-file-for-visit)))))

  (shell-command (format "xdg-mime query filetype %s | xargs xdg-mime default emacs.desktop"
                         (shell-quote-argument (dired-get-file-for-visit))))

  (message "The new default app is %s" (shell-command-to-string
                                        (format "xdg-mime query filetype %s | xargs xdg-mime query default"
                                                (shell-quote-argument (dired-get-file-for-visit))))))
#+end_src

*** Delete current file
#+begin_src emacs-lisp
(defun ram/delete-current-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if filename
        (if (y-or-n-p (concat "Do you really want to delete file " filename " ?"))
            (progn
              (delete-file filename)
              (message "Deleted file %s." filename)
              (kill-buffer)))
      (message "Not a file visiting buffer!"))))
#+end_src

*** Backward-kill-line
#+begin_src emacs-lisp
(defun ram/backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg))
  (company-indent-or-complete-common t))
#+end_src
*** insert ; at the end of line
#+begin_src emacs-lisp
(defun ram/insertSemicolon ()
  "Insert semicolon end of line"
  (interactive)
  (save-excursion
    (end-of-line)
    (insert ";")))
#+end_src

*** realign existing contents of buffer on column-width
#+begin_src emacs-lisp
(defun ram/fill-buffer ()
  (interactive)
  (save-excursion
    (save-restriction
      (widen)
      (fill-region (point-min) (point-max)))))
#+end_src

*** Cycle in the kill-ring reverse direction
#+begin_src emacs-lisp
(defun ram/yank-pop-forwards (arg)
  (interactive "p")
  (yank-pop (- arg)))
#+end_src

*** Projectile functions
#+begin_src emacs-lisp
;; (defun ram/projectile-run-project ()
;;   (completing-read "Choose: "
;;                    '("pub get"
;;                      "webdev serve")))

(defun ram/dart (arg)
  (interactive (list (completing-read "Choose: "
                                      '("pub get"
                                        "webdev serve"
                                        "pub run test"))))
  (cond ((string= arg "pub get")
         (ram/dart-pub-get))
        ((string= arg "webdev serve")
         (ram/dart-webdev-serve))
        ((string= arg "pub run test")
         (ram/dart-test))
        ;; default
        (t (message "Wrong option"))))

(defun ram/dart-test ()
  (projectile-run-vterm)
  (vterm-clear)
  (vterm-send-string "pub run test")
  (vterm-send-return))

(defun ram/dart-pub-get ()
  (projectile-run-vterm)
  (vterm-clear)
  (vterm-send-string "pub get")
  (vterm-send-return))

(defun ram/dart-webdev-serve ()
  (projectile-run-vterm)
  (vterm-clear)
  (vterm-send-string "webdev serve")
  (vterm-send-return))
#+end_src

*** Switch to the previous buffer
For some reason ~mode-line-other-buffer~ behaves odd in exwm.

#+begin_src emacs-lisp
(defun ram/switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+end_src

*** Launch apps
#+begin_src emacs-lisp :tangle no
(defun ram/launch-app (arg)
  (interactive (list (completing-read "Apps: "
                                      '("Google-chrome" "Firefox" "Shutdown" "JD" "Rofi"))))
  (cond ((string= arg "Google-chrome")
         ;; shell-quote-argument escapes white spaces on the file name
         (async-start-process "Google-chrome" "google-chrome" nil))
        ((string= arg "Firefox")
         (async-start-process "Firefox" "firefox" nil "-private"))
        ((string= arg "Shutdown")
         (async-start-process "Shutdown" "shutdown" nil "-P" "now"))
        ((string= arg "JD")
         (async-start-process "JD" "~/bin/jd2/JDownloader2" nil))
        ((string= arg "Rofi")
         (async-start-process "rofi" "rofi" nil "-show" "drun"))
        ;; default
        (t (message "Wrong option"))))
#+end_src

*** Mount drive
#+begin_src emacs-lisp
(defun ram/mount-drive ()
  (interactive)
  (async-start-process "udisksctl" "udisksctl" nil "mount" "-b" "/dev/sdb1"))
#+end_src

*** Hiding dired buffers in ivy
#+begin_src emacs-lisp :tangle no
(defun ram/ignore-dired-buffers (str)
  "Return non-nil if STR names a Dired buffer.
This function is intended for use with `ivy-ignore-buffers'."
  (let ((buf (get-buffer str)))
    (and buf (eq (buffer-local-value 'major-mode buf) 'dired-mode))))

(with-eval-after-load 'ivy
  (add-to-list 'ivy-ignore-buffers #'ram/ignore-dired-buffers))
#+end_src

*** Open dots.org
#+begin_src emacs-lisp :tangle no
(defun ram/open-dots()
  (interactive)
  (find-file "~/Projects/dots/dots.org"))
#+end_src

*** Open books
#+begin_src elisp :tangle no
(defun ram/open-books (arg)
  (interactive (list (completing-read "Books: "
                                      (directory-files "~/org/books" nil directory-files-no-dot-files-regexp))))
  (find-file (concat "~/org/books/" arg)))
#+end_src

*** selectrum-registers
#+begin_src emacs-lisp :tangle no
(require 'kmacro)
(require 'frameset)
(require 'register)

(defun selectrum-registers ()
  "Use a register, such as jumping to a buffer location or inserting text.

Each kind of register is prefixed with it's type, so that types are also
searchable.  Displayed type names are:

- \"File\": file names
- \"Frame configuration\": configurations of framesets
- \"Keyboard macro\": keyboard macros
- \"Position\": buffer makers and files queries (positions in closed files)
- \"Number\": numbers
- \"Rectangle\": rectangles of text

Basic text, rectangle of text, and numbers are inserted into the
current buffer at point.  Positions are moved to.  Frame and
window configurations are applied."

  (interactive)
  (let* ((selectrum-should-sort-p nil)
         (formatted-registers
          ;; Want to combine formatting and action function, so that we only have to check
          ;; the type of the register contents once.
          (mapcar (lambda (reg)
                    (append (let ((val (cdr reg)))
                              ;; Many of these description strings are copied from their
                              ;; respective Emacs library.
                              (pcase val
                                ;; File Names
                                (`(file . ,file-name)
                                 (list (concat "File: " file-name)
                                       #'jump-to-register))

                                ;; File Queries
                                ;; Registered markers of file buffers are turned into
                                ;; file queries after their respective buffer is closed.
                                (`(file-query ,file-name ,position)
                                 (list (concat "Position: " file-name
                                               " at " (number-to-string position))
                                       #'jump-to-register))

                                ;; Frame Configurations or Frame Set
                                ((pred frameset-register-p)
                                 (list (let* ((fs (frameset-register-frameset val))
                                              (ns (length (frameset-states fs))))
                                         (format "Frame configuration: %d frame%s, saved on %s."
                                                 ns
                                                 (if (= 1 ns) "" "s")
                                                 (format-time-string "%c" (frameset-timestamp fs))))
                                       #'jump-to-register))

                                ;; Keyboard Macros
                                ((pred kmacro-register-p)
                                 (list (concat "Keyboard macro: "
                                               (condition-case nil
                                                   (format-kbd-macro (kmacro-register-macro val) 1)
                                                 ;; Recover from error from `edmacro-fix-menu-commands'.
                                                 ;; In Emacs 27, it looks like mouse events are silently skipped over.
                                                 (error "Warning: Cannot display macros containing mouse clicks")))
                                       #'jump-to-register))

                                ;; Markers
                                ((pred markerp)
                                 (list (concat "Position: "
                                               (if-let ((buf (marker-buffer val)))
                                                   (concat (buffer-name buf)
                                                           " at "
                                                           (number-to-string (marker-position val)))
                                                 "Buffer no longer exists."))
                                       #'jump-to-register))

                                ;; Numbers
                                ((pred numberp)
                                 (list (concat "Number: " (number-to-string val))
                                       #'insert-register))

                                ;; Rectangles
                                ((and `(,elem1 . ,_)
                                      (guard (stringp elem1)))
                                 ;; NOTE: You'll need to adjust the indentation given your
                                 ;;       Selectrum settings.
                                 (list (concat "Rectangle: "
                                               (string-join
                                                val
                                                "\n                "))
                                       #'insert-register))

                                ;; Strings
                                ((pred stringp)
                                 (list (concat "Text: " val)
                                       ;; Could also do the following to flatten text.
                                       ;; (concat "Text: "
                                       ;;   (replace-regexp-in-string
                                       ;;    "\n"
                                       ;;    (propertize "^J" 'face 'escape-glyph)
                                       ;;    ;; (substring-no-properties val)
                                       ;;    val))
                                       #'insert-register))

                                ;; Window Configurations
                                ((and `(,window-config ,_)
                                      (guard (window-configuration-p window-config)))
                                 (list
                                  (let* ((stored-window-config window-config)
                                         (window-config-frame (window-configuration-frame stored-window-config))
                                         (current-frame (selected-frame)))
                                    ;; These mostly copied from register.el.
                                    (format "Window configuration: %s."
                                            (if (frame-live-p window-config-frame)
                                                (with-selected-frame window-config-frame
                                                  (save-window-excursion
                                                    (set-window-configuration stored-window-config)
                                                    (concat
                                                     (mapconcat (lambda (w) (buffer-name (window-buffer w)))
                                                                (window-list (selected-frame)) ", ")
                                                     (unless (eq current-frame window-config-frame)
                                                       " in another frame"))))
                                              "dead frame")))
                                  #'jump-to-register))

                                ;; For anything else, just mark it as garbage.
                                (_ '(garbage))))
                            ;; The register key.
                            (list (car reg))))
                  ;; Destructively sort a copy of the alist by ordering the keys.
                  (seq-sort-by #'car #'< (copy-sequence register-alist))))
         ;; Remove anything marked as garbage.
         (filtered-choices (seq-remove (lambda (choice) (eq (car choice) 'garbage))
                                       formatted-registers))

         ;; Create candidates as a list of strings.
         (actual-candidates (mapcar (lambda (choice)
                                      (propertize (car choice)
                                                  'selectrum-candidate-display-prefix
                                                  (concat (single-key-description (caddr choice))
                                                          ": ")))
                                    filtered-choices))

         ;; Use the selected string to match the desired register.
         (chosen-register (assoc (completing-read "Select register: " actual-candidates nil t)
                                 filtered-choices)))

    ;; Apply the correct action function to the register key.
    (funcall (cadr chosen-register) (caddr chosen-register))))
#+end_src

*** selectrum jump to outline headings
#+begin_src emacs-lisp :tangle no
(defvar selectrum-outline-history nil "History of chosen headings for `selectrum-outline'.")
(defun selectrum-outline ()
  "Jump to a heading.  Regexps are pre-defined.  Obeys narrowing."
  (interactive)
  (let ((selectrum-should-sort-p nil)) ; Headings should stay in order of appearance.
    ;; Just use Org's built-in features when applicable.
    (if (eq major-mode 'org-mode)
        (let ((org-outline-path-complete-in-steps)
              (org-goto-interface 'outline-path-completion))
          (org-goto))

      ;; Otherwise, have to find and format headings manually.
      (let* ((heading-regexp
              (cl-case major-mode
                ;; Groups: (1) level determinant, (2) heading text.
                ;; The top level is 0, for a zero-length determinant.
                (emacs-lisp-mode "^;;;\\(?1:;*\\)[[:blank:]]*\\(?2:[[:alnum:]][^z-a]*\\)\\'")
                (python-mode "^##\\(?1:\\**\\|#*\\)[[:blank:]]*\\(?2:[[:alnum:]][^z-a]*\\)\\'")
                (t (user-error "No headings defined for mode: %s" major-mode))))

             ;; Get the basic information of each heading in the accessible portion of the buffer.
             (buffer-contents (split-string (buffer-string) "\n"))
             (headings
              (cl-loop for txt in buffer-contents
                       for num from 1 to (1- (length buffer-contents))
                       ;; Only get the heading lines.
                       when (string-match heading-regexp txt)
                       ;; Heading text, Outline level, Line number
                       collect (list (match-string-no-properties 2 txt)
                                     (length (match-string-no-properties 1 txt))
                                     num)))

             ;; Create the prefix headings ("H1", "H1/h2", etc.)
             (formatted-headings
              (cl-loop
               ;; Variables for keeping track of heading "path".
               with prefix-list = '()   ; List of parent headings.
               with prev-heading-level = 0
               with prev-heading-text = nil
               ;; Heading titles can be repeated, so we include line numbers for context.
               with number-format = (format "L%%0%dd: " (length (number-to-string (length buffer-contents))))
               for (heading-text heading-level line-num) in headings
               collect (progn
                         ;; Check if we've moved to a different level.
                         (when (/= heading-level prev-heading-level)
                           ;; Update the prefix-list appropriately.
                           (setq prefix-list (if (> heading-level prev-heading-level)
                                                 (append prefix-list (list prev-heading-text))
                                               (cl-subseq prefix-list 0 heading-level)))
                           ;; Update prev-heading-level to current.
                           (setq prev-heading-level heading-level))

                         ;; Always update the previous heading.
                         (setq prev-heading-text heading-text)

                         (concat (format number-format line-num)
                                 (concat (string-join prefix-list "/")
                                         (and prefix-list "/") heading-text)))))

             ;; Get the desired heading.
             (chosen-heading (completing-read "Jump to heading: " formatted-headings
                                              nil t nil
                                              'selectrum-outline-history))
             ;; Stop at the ":". It is followed by one " ".
             (line-number-prefix (seq-take-while (lambda (char)
                                                   (not (char-equal ?: char)))
                                                 chosen-heading))
             ;; Get the line number for that heading, skipping the "L" in
             ;; line-number-prefix.
             (chosen-line-number (string-to-number (substring line-number-prefix 1)))
             ;; Get the current line number to determine the travel distance.
             (current-line-number (line-number-at-pos (point))))

        ;; Now do the actual movement, but first push mark.
        (push-mark (point) t)
        ;; Manually edit history to remove line numbers.
        (setcar selectrum-outline-history (substring chosen-heading
                                                     ;; Want after line-prefix followed by ": ".
                                                     (+ (length line-number-prefix) 2)))
        ;; Using `goto-line' isn't recommended for non-interactive use.
        (forward-line (- chosen-line-number current-line-number))
        (beginning-of-line-text 1)))))
#+end_src

*** In an org mode buffer, when you search for text that is in a fold Selectrum
swiper doesn't take care of opening the folds so you can see the text you're
at. You can call the following function at the end of selectrum swiper.

#+begin_src emacs-lisp :tangle no
(defun org:show-subtree-headlines ()
  "Show headlines surrounding point."
  (save-excursion
    (let ((points nil) (count 0))
      (unless (org-at-heading-p) (org-back-to-heading t))
      (push (point) points)
      (while (org-up-heading-safe)
        (push (point) points))
      (dolist (point points)
        (goto-char point)
        (when (org:heading-folded-p)
          (outline-toggle-children))))))

(defun selectrum:reveal-if-in-org-folds (orig-fn &rest args)
  (prog1 (apply orig-fn args)
    (when (eq major-mode 'org-mode)
      (org:show-subtree-headlines))))

(advice-add #'selectrum-swiper :around #'selectrum:reveal-if-in-org-folds)
#+end_src

*** selectrum swiper-like Jumping to Matching Lines
#+begin_src emacs-lisp :tangle no
(defvar selectrum-swiper-history nil "Submission history for `selectrum-swiper'.")
(defun selectrum-swiper ()
  "Search for a matching line and jump to the beginning of its text.  Obeys narrowing."
  (interactive)
  (let* ((selectrum-should-sort-p nil)
         (line-choices (cl-loop
                        with minimum-line-number = (line-number-at-pos (point-min) t)
                        with buffer-text-lines = (split-string (buffer-string) "\n")
                        with number-format = (format "L%%0%dd: " (length (number-to-string (length buffer-text-lines))))
                        for txt in buffer-text-lines
                        for num from minimum-line-number to (+ minimum-line-number
                                                               (1- (length buffer-text-lines)))
                        unless (string-empty-p txt) ; Just skip empty lines.
                        collect (concat (format number-format num) txt)))
         ;; Get the matching line.
         (chosen-line (completing-read "Jump to matching line: " line-choices
                                       nil t nil 'selectrum-swiper-history))
         ;; Stop at the ":". It is followed by one " ".
         (line-number-prefix (seq-take-while (lambda (char)
                                               (not (char-equal ?: char)))
                                             chosen-line))
         ;; Get the corresponding line number, skipping the "L" in line-number-prefix.
         (chosen-line-number (string-to-number (substring line-number-prefix 1)))
         ;; Get the current line number for determining the travel distance.
         (current-line-number (line-number-at-pos (point) t)))

    (push-mark (point) t)
    ;; Manually edit history to remove line numbers.
    (setcar selectrum-swiper-history (substring chosen-line
                                                ;; Want after line-prefix followed by ": ".
                                                (+ (length line-number-prefix) 2)))
    (forward-line (- chosen-line-number current-line-number))
    (beginning-of-line-text 1)))
#+end_src

*** Launching apps
#+begin_src emacs-lisp :tangle no
(defun ram/launch-app (arg)
  (interactive (list (completing-read "Apps: "
                                      '("google-chrome"
                                        "firefox"
                                        "shutdown"
                                        "jd"
                                        "calibre"
                                        "gimp"
                                        ))))
  (cond ((string= arg "google-chrome")
         ;; shell-quote-argument escapes white spaces on the file name
         (async-start-process "Google-chrome" "google-chrome" nil))
        ((string= arg "firefox")
         (async-start-process "Firefox" "firefox" nil "-private"))
        ((string= arg "shutdown")
         (async-start-process "Shutdown" "shutdown" nil "-P" "now"))
        ((string= arg "jd")
         (async-start-process "JD" "~/bin/jd2/JDownloader2" nil))
        ((string= arg "calibre")
         (async-start-process "Calibre" "calibre" nil))
        ((string= arg "gimp")
         (async-start-process "Gimp" "gimp" nil))
        ;; default
        (t (message "Wrong option"))))
#+end_src

*** elfeed and mpv
#+begin_src emacs-lisp :tangle no
(defun ram/mpv (url &optional ignored)
  (interactive (browse-url-interactive-arg "URL: "))
  (vterm)
  (vterm-send-string (format "mpv %s" url))
  (vterm-send-return))
#+end_src

** Make gc pauses faster by decreasing the threshold
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
#+begin_src emacs-lisp
(setq  gc-cons-threshold (* 2 1024 1024))
(setq  gc-cons-percentage .1)
#+end_src

* Early emacs
:PROPERTIES:
:header-args: :tangle ~/.emacs.d/early-init.el
:END:

#+begin_src
;;; early-init.el --- Early Emacs configuration -*- lexical-binding: t; -*-

(setq-default
 load-prefer-newer t
 package-enable-at-startup nil
 package-native-compile t)

(setq-default
 default-frame-alist
 '((background-color . "#3F3F3F")       ;; Default background color
   (foreground-color . "#DCDCCC")       ;; Default foreground color
   (fullscreen . maximized)             ;; Maximize the window by default
   (horizontal-scroll-bars . nil)       ;; No horizontal scroll-bars
   (left-fringe . 8)                    ;; Thin left fringe
   (menu-bar-lines . 0)                 ;; No menu bar
   (right-divider-width . 1)            ;; Thin vertical window divider
   (right-fringe . 8)                   ;; Thin right fringe
   (tool-bar-lines . 0)                 ;; No tool bar
   (vertical-scroll-bars . nil)))       ;; No vertical scroll-bars

;;; early-init.el ends here
#+end_src

* Emacs daemon
:PROPERTIES:
:header-args: :tangle ~/.config/systemd/user/emacs.service :mkdirp yes
:END:

It is not needed to add =systemctl start --user emacs.service= to =~.profile=.
If =systemctl enable --user emacs.service= is run.
https://www.youtube.com/watch?v=fg_jTo9SK9I

#+begin_src sh
[Unit]
Description=Emacs text editor
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=/home/last/bin/emacs/bin/emacs --daemon
ExecStop=/home/last/bin/emacs/bin/emacsclient --eval "(kill-emacs)"
Restart=no

[Install]
WantedBy=default.target
#+end_src

* Alacritty
** Theme
   #+begin_src sh :tangle no
     # Colors (Doom One)
     colors:
       # Default colors
       primary:
         background: '0x282c34'
         foreground: '0xbbc2cf'

       # Normal colors
       normal:
         black:   '0x282c34'
         red:     '0xff6c6b'
         green:   '0x98be65'
         yellow:  '0xecbe7b'
         blue:    '0x51afef'
         magenta: '0xc678dd'
         cyan:    '0x46d9ff'
         white:   '0xbbc2cf'
   #+end_src

* .profile
:PROPERTIES:
:header-args: :tangle ~/.profile
:END:
** Variables
#+begin_src sh
export _JAVA_AWT_WM_NONREPARENTING=1            # makes java application work correctly
export ANDROID_HOME="$HOME/bin/android"
export PYENV_ROOT="$HOME/bin/pyenv"
export GOPATH="$HOME/bin/go"
export POETRY_HOME="$HOME/bin/poetry"
export ALTERNATE_EDITOR=""
export EDITOR="emacsclient -c"                  # $EDITOR opens in GUI mode
export VISUAL="emacsclient -c -a emacs"         # $VISUAL opens in GUI mode
export MANPAGER=cat
export CXX="g++"
export CC="gcc"
export PATH="$HOME/bin/cpp-libraries/bin:$HOME/bin/graphviz/bin:$PATH"
export LIBRARY_PATH="$HOME/bin/cpp-libraries/lib:$HOME/bin/c-libraries/lib:$LIBRARY_PATH"
export C_INCLUDE_PATH="$HOME/bin/c-libraries/include:$CPLUS_INCLUDE_PATH"
export CPLUS_INCLUDE_PATH="$HOME/bin/cpp-libraries/include:$CPLUS_INCLUDE_PATH"
export LD_LIBRARY_PATH="$HOME/bin/c-libraries/lib:$HOME/bin/gcc-trunk/lib64:$HOME/bin/gcc-trunk/lib:$HOME/bin/clang/lib:$HOME/Projects/cpp/lazy cpp/cpp-for-lazy-programmers/external/SSDL/unix:$HOME/bin/cpp-libraries/lib:$HOME/bin/graphviz/lib:$LD_LIBRARY_PATH"
export HISTSIZE=10000
export HISTFILESIZE=10000
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:"$HOME/bin/pyenv/versions/3.5.0/lib"
#+end_src

** Paths
*** Default
#+begin_src sh
# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
        . "$HOME/.bashrc"
    fi
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi
#+end_src
*** Awk
#+begin_src sh
export PATH="$HOME/bin/awk/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
#+end_src
*** Build2
#+begin_src sh
export "PATH=$HOME/bin/build2/bin:$PATH"
#+end_src

*** Clang
#+begin_src sh
export PATH="$HOME/bin/clang/bin:$PATH"
# For some reason this only works in .bashrc
# export LD_LIBRARY_PATH="$HOME/bin/clang/lib:$LD_LIBRARY_PATH"
# export LIBRARY_PATH="$HOME/bin/clang/lib:$LD_LIBRARY_PATH"
#+end_src

*** Ccls
#+begin_src sh
export PATH="$HOME/bin/ccls/bin:$PATH"
#+end_src

*** Eldev
It is an alternative to Cask. Unlike Cask, Eldev itself is fully written in
Elisp and its configuration files are also Elisp programs.
#+begin_src sh
export PATH="$HOME/bin/eldev:$PATH"
#+end_src

*** Fd
#+begin_src sh
export PATH="$HOME/bin/fd:$PATH"
#+end_src

*** Kmonad
#+begin_src sh
export PATH="$HOME/bin/kmonad:$PATH"
#+end_src

*** Deno
#+begin_src sh
export DENO_INSTALL="$HOME/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"
#+end_src

*** Gcc
#+begin_src sh
export PATH="$HOME/bin/gcc-trunk/bin:$PATH"
#export LD_LIBRARY_PATH="$HOME/bin/gcc-10.2.0/lib:$HOME/bin/gcc-10.2.0/lib64:$LD_LIBRARY_PATH"
#export LIBRARY_PATH="$HOME/bin/gcc-10.2.0/lib:$HOME/bin/gcc-10.2.0/lib64:$LIBRARY_PATH"
export MANPATH="$HOME/bin/gcc-trunk/share/man:$MANPATH"
export INFOPATH="$HOME/bin/gcc-trunk/share/info:$INFOPATH"
#+end_src

*** Golang
#+begin_src sh
export PATH="/usr/local/go/bin:$PATH"
export PATH="$GOPATH/bin:$PATH"
#+end_src

*** Pyenv
#+begin_src sh
export PATH=$PYENV_ROOT/bin:$PATH
export PATH=$PYENV_ROOT/shims:$PATH
#+end_src

*** Anki
#+begin_src sh
export PATH="$HOME/bin/anki/bin:$PATH"
#+end_src

*** Poetry
#+begin_src sh
export PATH="$HOME/bin/poetry/bin:$PATH"
#+end_src

*** Alacritty
#+begin_src sh
export PATH=$HOME/bin/alarcritty:$PATH
#+end_src

*** Emacs
#+begin_src sh
export PATH=$HOME/bin/emacs/bin:$PATH
#+end_src

*** Neovim
#+begin_src sh
export PATH=$HOME/bin/neovim:$PATH
#+end_src

*** Node
#+begin_src sh
export PATH=$HOME/bin/node/bin:$PATH
#+end_src

*** Ninja
#+begin_src sh
export PATH=$HOME/bin/ninja:$PATH
#+end_src

*** Dart
#+begin_src sh
export PATH=$HOME/bin/flutter/bin/cache/dart-sdk/bin:$PATH
export PATH=$HOME/.pub-cache/bin:$PATH
#+end_src

*** Hugo
#+begin_src sh
export PATH=$HOME/bin/hugo:$PATH
#+end_src

*** Flutter
#+begin_src sh
export PATH=$HOME/bin/flutter/bin:$PATH
#+end_src

*** Android Studio
#+begin_src sh
export PATH=$HOME/bin/android-studio/bin:$PATH
#+end_src

*** Android Tools
#+begin_src sh
export PATH=$HOME/bin/android/emulator:$PATH
export PATH=$HOME/bin/android/cmdline-tools/latest/bin:$PATH
#+end_src

*** Jdk
#+begin_src sh
export PATH=$HOME/bin/jdk/bin:$PATH
#+end_src

*** Sqlite
#+begin_src sh
export PATH=$HOME/bin/sqlite:$PATH
#+end_src

*** Cmake
#+begin_src sh
export PATH=$HOME/bin/cmake/bin:$PATH
#+end_src

*** Scripts
#+begin_src sh
export PATH=$HOME/bin/scripts:$PATH
export PATH=$HOME/bin/scripts/build:$PATH
#+end_src

*** Guile
#+begin_src sh
export PATH=$HOME/bin/guile/bin:$PATH
#+end_src

*** Common lisp
#+begin_src sh
export PATH=$HOME/bin/sbcl/bin:$PATH
#+end_src

*** Ripgrep
#+begin_src sh
export PATH=$HOME/bin/ripgrep:$PATH
#+end_src

** Daemons
#+begin_src sh
systemctl start --user emacs.service
#+end_src

#+begin_src sh :tangle no
kmonad $HOME/.config/kmonad/config.kbd &
systemctl start --user emacs.service
#+end_src
* Bashrc
:PROPERTIES:
:header-args: :tangle ~/.bashrc
:END:
** prompt
https://github.com/riobard/bash-powerline
#+begin_src sh
source ~/.config/bash-powerline/bash-powerline.sh
#+end_src

** Variables
#+begin_src sh
export HISTSIZE=10000
export HISTFILESIZE=10000
export HISTCONTROL=ignoreboth:erasedups
export CXX="g++"
export CC="gcc"
export PATH="$HOME/bin/gcc-trunk/bin:$HOME/bin/build2/bin:$HOME/bin/cpp-libraries/bin:$HOME/bin/graphviz/bin:$PATH"

#export LD_LIBRARY_PATH="$HOME/bin/gcc-10.2.0/lib:$HOME/bin/gcc-10.2.0/lib64:$LD_LIBRARY_PATH"
#export LIBRARY_PATH="$HOME/bin/gcc-10.2.0/lib:$HOME/bin/gcc-10.2.0/lib64:$LIBRARY_PATH"
export MANPATH="$HOME/bin/gcc-10.2.0/share/man:$MANPATH"
export INFOPATH="$HOME/bin/gcc-10.2.0/share/info:$INFOPATH"

# For some reason this only works in .bashrc
# Also seems that one stdlib can be active (clang or gcc)
# export LD_LIBRARY_PATH="$HOME/bin/clang/lib:/usr/local/lib:$HOME/bin/gcc-10.2.0/lib64:$HOME/Projects/cpp/lazy cpp/cpp-for-lazy-programmers/external/SSDL/unix:$HOME/bin/cpp-libraries/lib:$HOME/bin/graphviz/lib:$LD_LIBRARY_PATH"

export LD_LIBRARY_PATH="$HOME/bin/gcc-trunk/lib64:$HOME/bin/gcc-trunk/lib:$HOME/bin/clang/lib:$HOME/Projects/cpp/lazy cpp/cpp-for-lazy-programmers/external/SSDL/unix:$HOME/bin/cpp-libraries/lib:$HOME/bin/graphviz/lib:$LD_LIBRARY_PATH"
#export LD_LIBRARY_PATH="$HOME/bin/clang/lib:$LD_LIBRARY_PATH"
#+end_src
** alias
#+begin_src sh

alias ds="~/bin/dart-sdk/bin/dart"
alias dsn="~/bin/dart-sdk/bin/dart --enable-experiment=non-nullable"
alias dsp="~/bin/dart-sdk/bin/pub"
alias dn="~/bin/dart-sdk/bin/dart2native"
alias anko="~/bin/anki-2.1.15-linux-amd64/bin/anki"
#+end_src
** functions
#+begin_src sh :tangle no
# fd - cd to selected directory
ff() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}
# fd - cd to selected directory
fd() {
  DIR=`find * -maxdepth 0 -type d -print 2> /dev/null | fzf-tmux` \
    && cd "$DIR"
}
# fdr - cd to selected parent directory
fdr() {
  local declare dirs=()
  get_parent_dirs() {
    if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
    if [[ "${1}" == '/' ]]; then
      for _dir in "${dirs[@]}"; do echo $_dir; done
    else
      get_parent_dirs $(dirname "$1")
    fi
  }
  local DIR=$(get_parent_dirs $(realpath "${1:-$PWD}") | fzf-tmux --tac)
  cd "$DIR"
}
#+end_src

** vterm
*** Enable the shell to send information to vterm via properly escaped sequences
#+begin_src sh
function vterm_printf(){
    if [ -n "$TMUX" ]; then
        # Tell tmux to pass the escape sequences through
        # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}
#+end_src

*** Function to be able to call elisp functions in vterm
#+begin_src sh
vterm_cmd() {
    local vterm_elisp
    vterm_elisp=""
    while [ $# -gt 0 ]; do
        vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
        shift
    done
    vterm_printf "51;E$vterm_elisp"
}
#+end_src
*** Open file or dired in emacs when using vterm
#+begin_src sh
op() {
    vterm_cmd find-file "$(realpath "$@")"
}
#+end_src
*** Use emacs built-in man command
#+begin_src sh
if [[ "$INSIDE_EMACS" = 'vterm' ]]; then
    function mn() {
        vterm_cmd man "$1"
    }
fi

#+end_src

*** Use a temp buffer instead of less
#+begin_src sh
function menos() {
    xclip -selection clipboard
    vterm_cmd menos
}
#+end_src

*** Update the CWD
#+begin_src sh
vterm_set_directory() {
    vterm_cmd update-pwd "$PWD/"
}
#+end_src

** fzf
  - Install
    https://github.com/junegunn/fzf
    #+begin_src sh :tangle no
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install
    #+end_src

    This is add automaticly after installing fzf
    #+begin_src sh
    [ -f ~/.fzf.bash ] && source ~/.fzf.bash
    #+end_src

** pyenv
#+begin_src sh
export PATH=$PYENV_ROOT/bin:$PATH
export PATH=$PYENV_ROOT/shims:$PATH

if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
fi
#+end_src

** Directory tracking and Prompt tracking
#+begin_src sh
vterm_prompt_end(){
    vterm_printf "51;A$(whoami):$(pwd)"
}
PS1=$PS1'\[$(vterm_prompt_end)\]'
#+end_src
** dcli
#+begin_src sh
export PATH=$PATH:/home/last/.dcli/bin
complete -o nospace -C 'dcli_complete' dcli
#+end_src
* Zathura
:PROPERTIES:
:header-args: :tangle ~/.config/zathura/zathurarc
:END:
#+begin_src sh
# Open document in fit-width mode by default
set adjust-open "width"

set smooth-scroll true
set statusbar-basename true
set selection-clipboard clipboard
#+end_src
* Common lisp (.sbclrc)
:PROPERTIES:
:header-args: :tangle ~/.sbclrc
:END:
#+begin_src lisp
;;; The following lines added by ql:add-to-init-file:
#-quicklisp
(let ((quicklisp-init (merge-pathnames "bin/quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))
;;;

(pushnew (truename "~/Projects/lisp") ql:*local-project-directories* )
;; update of the system index file
;; ~/bin/quicklisp/local-projects/system-index.txt
(ql:register-local-projects)
#+end_src
* Guile (.guile)
:PROPERTIES:
:header-args: :tangle ~/.guile
:END:
#+begin_src lisp
(module-set! (resolve-module '(system repl common))
             'repl-welcome (const #f))
#+end_src
* ~/.guile-geiser
:PROPERTIES:
:header-args: :tangle ~/.guile-geiser
:END:
Remove the welcome message
#+begin_src lisp
(module-set! (resolve-module '(system repl common))
             'repl-welcome (const #f))
#+end_src
* Stumpwm
:PROPERTIES:
:header-args: :tangle ~/.stumpwmrc
:END:
** Have access to the sumpwm functions
#+begin_src lisp
(in-package :stumpwm)
#+end_src
** Connect sly to stumpwm
Going back to the .stumpwmrc, notice how the port is set to 4004? I do that so
that when you start SLY in Emacs, there are no errors because the default port
is actually 4005. This ensures you can't mess up your WM by accident while
writing unrelated code.
[[https://kaashif.co.uk/2015/06/28/hacking-stumpwm-with-common-lisp/][kaashif.co.uk: Hacking StumpWM with Common Lisp]]

#+begin_src lisp :tangle no
(ql:quickload :slynk)
(slynk:create-server :port 4004 :dont-close t)
;; (slynk:create-server :port 4008)
#+end_src

** Workspaces
Stumpwm has only one workspace by default.
#+begin_src lisp
(defvar *ram/workspaces* (list "1" "2" "3"))
;; rename the default workspace to "1"
(stumpwm:grename (nth 0 *ram/workspaces*))
;; create workspace "2" and "3"
(dolist (workspace (cdr *ram/workspaces*))
  (stumpwm:gnewbg workspace))
#+end_src

** Set the prefix key
#+begin_src lisp
;; (run-shell-command "xmodmap $HOME/Projects/dots/modmap" t)
;; (run-shell-command "xmodmap -e \'keycode 94 = F20\'" t)
;; (set-prefix-key (kbd "F20"))
;; (set-prefix-key (kbd "less"))
#+end_src

** Key bindings
*** Programs
#+begin_src lisp
(define-key *root-map* (kbd "p") "exec dmenu_core")
(define-key *root-map* (kbd "c") "exec alacritty")
#+end_src

*** Switch to a workspace
#+begin_src lisp
;; move to workspace
(defvar *move-to-keybinds* (list "!" "@" "#"))
(dotimes (y (length *ram/workspaces*))
  (let ((workspace (write-to-string (+ y 1))))
    (define-key *root-map* (kbd workspace) (concat "gselect " workspace))
    (define-key *root-map* (kbd (nth y *move-to-keybinds*)) (concat "gmove-and-follow " workspace))))
#+end_src

*** Volume control
#+begin_src lisp
;; define volume control keys
(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer set Master 5%-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer set Master 5%+")
(define-key *top-map* (kbd "XF86AudioMute") "exec amixer set Master toggle")
;; (define-key *top-map* (kbd "XF86AudioMicMute") "exec amixer set Capture toggle")
#+end_src

*** Windows focus
#+begin_src lisp :tangle no
;; (define-key *root-map* (kbd "h") "move-focus left")
;; (define-key *root-map* (kbd "j") "move-focus down")
;; (define-key *root-map* (kbd "k") "move-focus up")
;; (define-key *root-map* (kbd "l") "move-focus right")
#+end_src

*** Move windows around
#+begin_src lisp :tangle no
;; (define-key *root-map* (kbd "H") "move-window left")
;; (define-key *root-map* (kbd "J") "move-window down")
;; (define-key *root-map* (kbd "K") "move-window up")
;; (define-key *root-map* (kbd "L") "move-window right")
#+end_src

*** Restart
#+begin_src lisp :tangle no
;; (define-key *root-map* (kbd "R") "restart-hard")
#+end_src

*** Show programs in every workspaces
#+begin_src lisp
(define-key *root-map* (kbd "0") "vgroups")
#+end_src

*** Brightness
#+begin_src lisp
;; (define-key *top-map* (kbd "XF86MonBrightnessUp") "backlight-up")
;; (define-key *top-map* (kbd "XF86MonBrightnessDown") "backlight-down")
#+end_src

** Frame preference
#+begin_src lisp :tangle no
;;;; Frame Preferences
(define-frame-preference "Default"
    ;; frame raise lock (lock AND raise == jumpto)
    (0 t   t :class "Firefox"))

(define-frame-preference "MAIL"
    ;; frame raise lock (lock AND raise == jumpto)
    (0 t   t :class "Thunderbird"))

(define-frame-preference "EMACS"
    ;; frame raise lock (lock AND raise == jumpto)
    (0 t   t :class "Emacs"))
#+end_src
* Kmonad
:PROPERTIES:
:header-args: :tangle ~/.config/kmonad/config.kbd
:END:
** Copy-out the following template to quickly create a layer

#+begin_src lisp :tangle no
#| --------------------------------------------------------------------------

(deflayer base
  _         _    _    _    _    _    _    _    _    _    _   _   _   _   _     _    _
  _         _    _    _    _    _    _    _    _    _    _   _   _   _              _
  _         _    _    _    _    _    _    _    _    _    _   _   _   _              _
  _         _    _    _    _    _    _    _    _    _    _   _   _                  _
  _    _    _    _    _    _    _    _    _    _    _    _   _       _              _
  _         _    _         _         _    _    _                 _   _   _
  )

-------------------------------------------------------------------------- |#
#+end_src

** Basic system config
The name given as the first argument to ~uinput-sink~ will be the
name given to the virtual keyboard that KMonad creates.

~input~ is the build-in notebook keyboard. If a keyboard is plug, the value
has to be changed.

~fallthrough~ just means that if a key is not define in the current layer,
it will take the key value of the base layer.

#+begin_src lisp
(defcfg
  input  (device-file "/dev/input/by-path/platform-i8042-serio-0-event-kbd")
  output (uinput-sink "KMonad kbd"))
#+end_src

** Aliases
*** Layout aliases
#+begin_src lisp
(defalias
  def (layer-switch default)
  d+e #((layer-switch default) P20 esc)
  d+s #((layer-switch default) P20 spc)
  ev (layer-switch edit-nav)
  hl (layer-switch handler)
  win (layer-switch window)
  qk (layer-switch quick-access)
  ema (layer-switch emacs)
  sym (layer-switch symbol)
  caps (layer-switch caps)
  num (layer-switch num)
  org (layer-switch org-mode))
#+end_src

*** Window manager aliases
#+begin_src lisp
;; Window manager
(defalias
  ctt #(C-t P20 C-t @def)
  ct1 #(C-t P20 1 @def)
  ct2 #(C-t P20 2 @def)
  ct3 #(C-t P20 3 @def)
  kill #(C-t P20 C-k @def)
  nxt #(C-t P20 A-n @def)
  pvs #(C-t P20 A-p @def)
  pro #(C-t P50 p @def)
  )
#+end_src

*** Emacs aliases
#+begin_src lisp
(defalias
  ;; M-x
  mx #(A-x @def)
  ;; toggle vterm
  cccvv #(C-c c v v @def)
  ;; tab-new
  cxt2 #(C-x t 2 @def)
  ;; save-buffer
  cxcs #(C-x C-s @def)
  ;; cancel
  cg #(C-g @def)
  ;; confirm
  cccc #(C-c C-c @def)
  ;; open file
  cxcf #(C-x C-f @def)
  ;; open roam
  cccrn #(C-c c r n @def)
  ;; tangle
  cccvt #(C-c C-v t @def)
  ;; magit-status
  cxg #(C-x g @def)
  ;; eval-expression
  as: #(A-S-: @def)
  ;; consult-ripgrep
  ccccr #(C-c c c r @def)
  )
#+end_src

*** Symbols aliases
#+begin_src lisp
;; symbols
(defalias
  [ #([ @def)
  ] #(] @def)
  op #(\( @def)
  cp #(\) @def)
  { #({ @def)
  } #(} @def)
  & #(& @def)
  ,* #(* @def)
  / #(/ @def)
  r/ #(\\ @def)
  ex #(^ @def)
  = #(= @def)
  ` #(` @def)
  ~ #(~ @def)
  at #(@ @def)
  us #(\_ @def)
  - #(- @def)
  | #(| @def)
  ; #(; @def)
  + #(+ @def)
  ? #(? @def)
  % #(% @def)
  ! #(! @def)
  # #(# @def)
  < #(< @def)
  > #(> @def)
  : #(: @def)
  , #(, @def)
  . #(. @def)
  $ #($ @def)
  ^ #(^ @def)
  qu #(" @def)
  ;; one tap -> ;
  ;; two taps -> :
  ;: (multi-tap 200 @; @:)
  ;; one tap -> ?
  ;; two taps -> !
  ?! (multi-tap 200 @? @!)
  ;; one tap -> /
  ;; two taps -> \
  // (multi-tap 200 @/ @r/)
  ;; one tap -> {
  ;; two taps -> }
  {} (multi-tap 200 @{ @})
  ;; one tap -> -
  ;; two taps -> _
  -u (multi-tap 200 @- @us)
  ;; one tap -> <
  ;; two taps -> >
  <> (multi-tap 200 @< @>)
  ;; one tap -> `
  ;; two taps -> ~
  `~ (multi-tap 200 @` @~)
  ;; one tap -> '
  ;; two taps -> "
  qq (multi-tap 200 ' ")
)
#+end_src

*** Navegation aliases
#+begin_src lisp
(defalias
  ;; beggining of line
  ca #(C-a @def)
  ;; end of line
  ce #(C-e @def)
  ;; scroll half page up
  cccvu #(C-c c v u)
  ;; scroll half page down
  cccvd #(C-c c v d)
  ;; tab-next
  cxto #(C-x t o @def)
  ;; delete-window
  cx0 #(C-x 0 @def)
  ;; delete-other-window
  cx1 #(C-x 1 @def)
  ;; other-window
  cxo #(C-x o @def)
  )
#+end_src

*** Quick access aliases
#+begin_src lisp
(defalias
  ;; fancy-dabbrev-expand-or-indent
  cccfd #(C-c c f d @def)
  ;; yas-expand
  cccyi #(C-c c y i @def)
  ;; search and replace
  as% #(A-S-% @def)
  ;; org-toggle-narrow-to-subtree
  cccon #(C-c c o n @def)
  ;; search
  cs #(C-s @def)
  ;; open dired
  cccdd #(C-c c d d @def)
  ;; escape
  escp #(esc @def)
  ;; previous buffer
  ccce, #(C-c c e , @def)
  ;; two letters search
  cccaf #(C-c c a f @def)
  ;; eval sexp
  cxce #(C-x C-e @def)
  ;; embark-act
  cccka #(C-c c k a @def)
  ;; embark-dwim
  ccckd #(C-c c k d @def)
  ;; one tap -> embark-act
  ;; two taps -> embark-dwim
  ead (multi-tap 300 @cccka @ccckd)
  ;; V
  V #(V @def)
  ;; C-v
  cv #(C-v @def)
  ;; one tap -> V
  ;; two taps -> C-v
  vv (multi-tap 300 @V @cv)
  ;; C-y
  cy #(C-y @def)
)
#+end_src

*** Org-mode aliases
#+begin_src lisp
(defalias
  ;; consult-outline
  ccno #(C-c c n o @def)
)
#+end_src

*** Edit aliases
#+begin_src lisp
(defalias
  ;;M-k kills to the left
  cccrk #(C-c c r k @def)
  ck #(C-k @def)
)
#+end_src

** Source layer
First up is the source (base) layer; this is used to set the default
keys that will be overwritten later.  It is `not' a layer that will
be used in the actual layout.

#+begin_src lisp
(defsrc
  esc         f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11   f12    pause  prnt  ins  del
  `           1    2    3    4    5    6    7    8    9    0    -     =      bspc              home
  tab         q    w    e    r    t    y    u    i    o    p    [     ]      ret               pgup
  caps        a    s    d    f    g    h    j    k    l    ;    '     \                        pgdn
  lsft   102d z    x    c    v    b    n    m    ,    .    /    rsft         up                end
  lctl        lmet lalt      spc       ralt cmps rctl                 left   down   rght
  )
#+end_src

** Layers
*** Default layer
Since this is the first layer, it's the layout KMonad starts in.

#+begin_src lisp
(deflayer default
  esc         f1     f2   f3   f4     f5   f6   f7   f8   f9   f10  f11   f12    pause  prnt  ins  del
  `           1      2    3    4      5    6    7    8    9    0    -     =      bspc              home
  tab         q      w    e    r      t    y    u    i    o    p    [     ]      ret               pgup
  @ev         a      s    d    f      g    h    j    k    l    @hl  @qq   \                        pgdn
  lsft  C-t   z      x    c    v      b    n    m    @qk  @sym /    rsft         up                end
  lctl        lmet   lalt      spc         ralt cmps rctl                 left   down   rght
  )
#+end_src

*** Intermediate layer
#+begin_src lisp
(deflayer handler
  @d+e      _      _    _       _      _    _    _    _    _    _     _   _   _   _     _    _
  _         _      _    _       _      _    _    _    _    _    _     _   _   _              _
  _         _      _    @ema    _      _    _    _    _    @org _     _   _   _              _
  _         @caps  _    _       _      _    _    _    _    _    @ctt  _   _                  _
  _    _    _      _    @caps   _      _    @num _    _    _    _     _       _              _
  _         _      _            @win        @def _    _                   _   _   _
  )
#+end_src

*** Quick access layer
#+begin_src lisp
(deflayer quick-access
  @d+e      _      _     _      _      _      _      _      _      _    _     _   _   _   _     _    _
  _         _      _     _      _      _      _      _      _      _    _     _   _   _              _
  _         _      _     @cxce  @as%   @cccvv _      _      @cccyi _    @cy   _   _   _              _
  _         @ead   @cs   @cccdd @cccaf _      _      _      _      _    _     _   _                  _
  _    _    _      _     _      @vv    _      @cccon @cccfd @ccce, _    _     _       _              _
  _         _      _            @escp         @def   _      _                     _   _   _
  )
#+end_src

*** Edit-navegation layer
#+begin_src lisp
(deflayer edit-nav
  @d+e      _    _    _      _    _    _      _       _      _    _      _   _   _   _     _    _
  _         _    _    _      _    _    _      _       _      _    _      _   _   _              _
  _         _    _    A-del  A-d  _    _      @cccvd  @cccvu @cxo @cxto  _   _   _              _
  @def      _    _    bspc   C-d  _    C-b    C-n     C-p    C-f  _      _   _                  _
  _    _    _    _    @cccrk @ck  _    @ca    @ce     @cx1   @cx0 _      _       _              _
  _         _    _           @def      @def   _       _                      _   _   _
  )
#+end_src

*** Symbols layer
#+begin_src lisp
(deflayer symbol
  @d+e      _    _    _    _    _    _    _    _    _    _   _   _   _   _     _    _
  _         _    _    _    _    _    _    _    _    _    _   _   _   bspc           _
  _         @?!  @at  @^   @`~  _    _    @#   @=   @|   @+  _   _   _              _
  _         @&   @*   @//  @[   @]   @$   @{}  @-u  @<>  @;: _   _                  _
  _    _    _    _    _    @%   _    @op  @cp  @,   @.   _   _       _              _
  _         _    _         @def      @def _    _                 _   _   _
  )
#+end_src

*** Window manager layer
#+begin_src lisp
(deflayer window
  @d+e      _    _    _    _    _    _    _    _     _    _     _   _   _   _     _    _
  _         _    _    _    _    _    _    _    _     _    _     _   _   _              _
  _         _    _    _    _    _    _    _    _     _    _     _   _   _              _
  _         @ct1 @ct2 @ct3 _    _    _    _    @kill _    _     _   _                  _
  _    _    _    _    _    _    _    @pvs @nxt _     _    _     _       _              _
  _         _    _         @pro      @def _    _                    _   _   _
  )
#+end_src

*** Emacs layer
#+begin_src lisp
(deflayer emacs
  @d+e      _    _     _     _      _     _      _    _     _      _     _   _   _   _     _    _
  _         _    _     _     _      _     _      _    _     _      _     _   _   _              _
  _         _    @cxcs @mx   @ccccr @cxt2 _      _    _     _      _     _   _   _              _
  _         _    _     _     @cxcf  @cg   C-h    _    _     @cccvt @as:  _   _                  _
  _    _    _    _     @cccc _      _     @cccrn @cxg _     _      _     _       _              _
  _         _    _           _            @def   _    _                      _   _   _
  )
#+end_src

*** Org-mode
#+begin_src lisp
(deflayer org-mode
  @d+e      _    _    _    _    _    _    _    _    _     _     _   _   _   _     _    _
  _         _    _    _    _    _    _    _    _    _     _     _   _   _              _
  _         _    _    _    _    _    _    _    _    @ccno _     _   _   _              _
  _         _    _    _    _    _    _    _    _    _     _     _   _                  _
  _    _    _    _    _    _    _    _    _    _    _     _     _       _              _
  _         _    _         _         @def _    _                    _   _   _
  )
#+end_src

*** Caps layer
#+begin_src lisp
(deflayer caps
  @d+e      _      _    _       _      _    _    _    _    _    _     _   _   _   _     _    _
  _         _      _    _       _      _    _    _    _    _    _     _   _   bspc           _
  _         Q      W    E       R      T    Y    U    I    O    P     _   _   _              _
  _         A      S    D       F      G    H    J    K    L    @hl   _   _                  _
  _    _    Z      X    C       V      B    N    M    @qk  @sym _     _       _              _
  _         _      _            @def        @def _    _                   _   _   _
  )
#+end_src

*** Number layer
#+begin_src lisp
(deflayer num
  @d+e      _    _    _    _    _    _    _    _    _    _   _   _   _   _     _    _
  _         _    _    _    _    _    _    _    _    _    _   _   _   bspc           _
  _         _    _    _    _    _    _    _    _    _    _   _   _   _              _
  _         1    2    3    4    5    6    7    8    9    @hl _   _                  _
  _    _    _    _    _    _    _    0    _    @qk  @sym _   _       _              _
  _         _    _         @def      @def _    _                 _   _   _
  )

#+end_src
